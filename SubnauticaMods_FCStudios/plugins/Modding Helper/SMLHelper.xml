<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SMLHelper</name>
    </assembly>
    <members>
        <member name="T:SMLHelper.Assets.Buildable">
            <summary>
            An item that can be built into the game world.
            </summary>
            <seealso cref="T:SMLHelper.Assets.PdaItem" />
            <seealso cref="T:SMLHelper.Assets.Spawnable"/>
        </member>
        <member name="P:SMLHelper.Assets.Buildable.HandOverText">
            <summary>
            Obsolete. No longer functional. Handle with a customized HandTarget instead.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.Buildable.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Assets.Buildable"/>, the basic class for any item that can built using the Habitat Builder Tool.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType" /> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="T:SMLHelper.Assets.Craftable">
            <summary>
            An item that can be crafted into the game world from a fabricator.
            </summary>
            <seealso cref="T:SMLHelper.Assets.PdaItem" />
            <seealso cref="T:SMLHelper.Assets.Spawnable" />
        </member>
        <member name="P:SMLHelper.Assets.Craftable.FabricatorType">
            <summary>
            Override with the vanilla fabricator that crafts this item.<para/>
            Leave this as <see cref="F:CraftTree.Type.None"/> if you are manually adding this item to a custom fabricator.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Craftable.StepsToFabricatorTab">
            <summary>
            Override with the tab node steps to take to get to the tab you want the item's blueprint to appear in.
            If not overriden, the item will appear at the craft tree's root.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Craftable.CraftingTime">
            <summary>
            Override with a custom crafting time for this item. Normal default crafting time is <c>1f</c>.<para/>
            Any value zero or less will be ignored.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.Craftable.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Assets.Craftable"/>, the basic class for any item that can be crafted at a fabricator.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType" /> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="T:SMLHelper.Assets.CustomFabricator">
            <summary>
            An asset class inheriting from <seealso cref="T:SMLHelper.Assets.Buildable"/> that streamlines the process of creating a custom fabricator with a custom crafting tree.
            </summary>
            <seealso cref="T:SMLHelper.Assets.ModPrefab"/>
        </member>
        <member name="T:SMLHelper.Assets.CustomFabricator.Models">
            <summary>
            Defines a list of available models for your <see cref="T:SMLHelper.Assets.CustomFabricator"/>.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.CustomFabricator.Models.Fabricator">
            <summary>
            The regular fabricator like the one in the life pod.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.CustomFabricator.Models.Workbench">
            <summary>
            The modification station that upgrades your equipment.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.CustomFabricator.Models.MoonPool">
            <summary>
            The style of fabricator found in the Moon Pool and the Cyclops sub.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.CustomFabricator.Models.Custom">
            <summary>
            Use this option only if you want to provide your own custom model for your fabricator.<para/>
            To use this value, you must override the <see cref="M:SMLHelper.Assets.CustomFabricator.GetCustomCrafterPreFab"/> method.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialized a new <see cref="T:SMLHelper.Assets.CustomFabricator"/> based on the <see cref="T:SMLHelper.Assets.Spawnable"/> asset class.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType"/> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.Model">
            <summary>
            Override this property to change which model your custom fabricator will use.<para/>
            By default, this will be the standard <see cref="F:SMLHelper.Assets.CustomFabricator.Models.Fabricator"/> as seen in the lifepod.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.AllowedInBase">
            <summary>
            Override this property to change the value of <see cref="F:Constructable.allowedInBase"/>.<para/>
            Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.AllowedInCyclops">
            <summary>
            Override this property to change the value of <see cref="F:Constructable.allowedInSub"/>.<para/>
            Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.AllowedOutside">
            <summary>
            Override this property to change the value of <see cref="F:Constructable.allowedOutside"/>.<para/>
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.AllowedOnCeiling">
            <summary>
            Override this property to change the value of <see cref="F:Constructable.allowedOnCeiling"/>.<para/>
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.AllowedOnGround">
            <summary>
            Override this property to change the value of <see cref="F:Constructable.allowedOnGround"/>.<para/>
            Defaults to <c>true</c> for <see cref="F:SMLHelper.Assets.CustomFabricator.Models.Workbench"/> and <c>false</c> for all others.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.AllowedOnWall">
            <summary>
            Override this property to change the value of <see cref="F:Constructable.allowedOnWall"/>.<para/>
            Defaults to <c>false</c> for <see cref="F:SMLHelper.Assets.CustomFabricator.Models.Workbench"/> and <c>true</c> for all others.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.RotationEnabled">
            <summary>
            Override this property to change the value of <see cref="F:Constructable.rotationEnabled"/>.<para/>
            Defaults to <c>true</c> for <see cref="F:SMLHelper.Assets.CustomFabricator.Models.Workbench"/> and <c>false</c> for all others.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.UseCustomTint">
            <summary>
            Override this value tp <c>true</c> along with <see cref="P:SMLHelper.Assets.CustomFabricator.ColorTint"/> to apply a simple tint to your custom fabricator for easy customization.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.ColorTint">
            <summary>
            Override this value to your desired <see cref="T:UnityEngine.Color"/> along with <see cref="P:SMLHelper.Assets.CustomFabricator.UseCustomTint"/> to apply a simple tint to your custom fabricator for easy customization.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.TreeTypeID">
            <summary>
            The ID value for your custom craft tree. This is set after this <see cref="M:SMLHelper.Assets.Spawnable.Patch"/> method is invoked.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.Root">
            <summary>
            Gets the root node of the crafting tree. This is set after this <see cref="M:SMLHelper.Assets.Spawnable.Patch"/> method is invoked.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.CategoryForPDA">
            <summary>
            Override with the category within the group in the PDA blueprints where this item appears.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.CustomFabricator.GroupForPDA">
            <summary>
            Override with the main group in the PDA blueprints where this item appears.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.GetGameObject">
            <summary>
            The in-game <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.GetGameObjectAsync(IOut{UnityEngine.GameObject})">
            <summary>
            The in-game <see cref="T:UnityEngine.GameObject"/>, async way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.GetCustomCrafterPreFab">
            <summary>
            Override this method if you want to provide your own prefab and model for your custom fabricator.<para/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.GetCustomCrafterPreFabAsync(IOut{UnityEngine.GameObject})">
            <summary>
            Override this method if you want to provide your own prefab and model for your custom fabricator.<para/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.CreateCustomCraftTree(CraftTree.Type@)">
            <summary>
            Override this method if you want full control over how your custom craft tree is built up.<para/>
            To use this method's default behavior, you must use the following methods to build up your crafting tree.<para/>
            - <see cref="M:SMLHelper.Assets.CustomFabricator.AddCraftNode(TechType,System.String)"/><para/>
            - <see cref="M:SMLHelper.Assets.CustomFabricator.AddCraftNode(System.String,System.String)"/><para/>
            - <see cref="M:SMLHelper.Assets.CustomFabricator.AddCraftNode(SMLHelper.Assets.Craftable,System.String)"/><para/>
            </summary>
            <param name="craftTreeType"></param>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.AddTabNode(System.String,System.String,Atlas.Sprite,System.String)">
            <summary>
            Adds a new tab node to the custom crafting tree of this fabricator.
            </summary>
            <param name="tabId">The internal ID for the tab node.</param>
            <param name="displayText">The in-game text shown for the tab node.</param>
            <param name="tabSprite">The sprite used for the tab node.</param>
            <param name="parentTabId">Optional. The parent tab of this tab.<para/>
            When this value is null, the tab will be added to the root of the craft tree.</param>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.AddCraftNode(TechType,System.String)">
            <summary>
            Adds a new crafting node to the custom crafting tree of this fabricator.
            </summary>
            <param name="techType">The item to craft.</param>
            <param name="parentTabId">Optional. The parent tab of this craft node.<para/>
            When this value is null, the craft node will be added to the root of the craft tree.</param>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.AddCraftNode(System.String,System.String)">
            <summary>
            Safely attempts to add a new crafting node to the custom crafting tree of this fabricator.<para/>
            If the modded TechType is not found, the craft node will not be added.
            </summary>
            <param name="moddedTechType">The modded item to craft.</param>
            <param name="parentTabId">Optional. The parent tab of this craft node.<para/>
            When this value is null, the craft node will be added to the root of the craft tree.</param>
        </member>
        <member name="M:SMLHelper.Assets.CustomFabricator.AddCraftNode(SMLHelper.Assets.Craftable,System.String)">
            <summary>
            Safely adds a new crafting node to the custom crafting tree of this fabricator.<para/>
            If the item has not been patched yet, its <see cref="M:SMLHelper.Assets.Spawnable.Patch"/> method will first be invoked.
            </summary>
            <param name="item">The <see cref="T:SMLHelper.Assets.Craftable"/> item to craft from this fabricator.</param>
            <param name="parentTabId">Optional. The parent tab of this craft node.<para/>
            When this value is null, the item's <see cref="P:SMLHelper.Assets.Craftable.StepsToFabricatorTab"/> property will be checked instead.<para/>
            The craft node will be added to the root of the craft tree if both are null.</param>
        </member>
        <member name="T:SMLHelper.Assets.Equipable">
            <summary>
            An item that can be crafted and equipped.
            </summary>    
            <seealso cref="T:SMLHelper.Assets.Spawnable" />
            <seealso cref="T:SMLHelper.Assets.Craftable" />
        </member>
        <member name="P:SMLHelper.Assets.Equipable.EquipmentType">
            <summary>
            Gets the type of equipment slot this item can fit into.
            </summary>
            <value>
            The type of the equipment slot compatible with this item.
            </value>
        </member>
        <member name="P:SMLHelper.Assets.Equipable.QuickSlotType">
            <summary>
            Gets the type of equipment slot this item can fit into.
            </summary>
            <value>
            The type of the equipment slot compatible with this item.
            </value>
        </member>
        <member name="M:SMLHelper.Assets.Equipable.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLHelper.Assets.Equipable"/> class.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType" /> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="T:SMLHelper.Assets.ModPrefab">
            <summary>
            The abstract class to inherit when you want to add new PreFabs into the game.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.ModPrefab.ClassID">
            <summary>
            The class identifier used for the <see cref="T:PrefabIdentifier" /> component whenever applicable.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.ModPrefab.PrefabFileName">
            <summary>
            Name of the prefab file.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.ModPrefab.TechType">
            <summary>
            The <see cref="P:SMLHelper.Assets.ModPrefab.TechType"/> of the corresponding item.
            Used for <see cref="T:TechTag" />, and <see cref="T:Constructable" /> components whenever applicable.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.ModPrefab.#ctor(System.String,System.String,TechType)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLHelper.Assets.ModPrefab" /> class.
            </summary>
            <param name="classId">The class identifier used for the <see cref="T:PrefabIdentifier" /> component whenever applicable.</param>
            <param name="prefabFileName">Name of the prefab file.</param>
            <param name="techType">The techtype of the corresponding item. 
            Used for the <see cref="T:TechTag" /> and <see cref="T:Constructable" /> components whenever applicable.
            Can also be set later in the constructor if it is not yet provided.</param>
        </member>
        <member name="M:SMLHelper.Assets.ModPrefab.ProcessPrefab(UnityEngine.GameObject)">
            <summary>
            Caches the prefab, then sets its TechType and ClassID to a default set of values applicable to most mods.<br/>
            FOR ADVANCED MODDING ONLY. Do not override unless you know exactly what you are doing.
            </summary>
            <param name="go"></param>
        </member>
        <member name="M:SMLHelper.Assets.ModPrefab.GetGameObject">
            <summary>
            Gets the prefab game object. Set up your prefab components here.
            The <see cref="P:SMLHelper.Assets.ModPrefab.TechType"/> and ClassID are already handled.
            </summary>
            <returns>The game object to be instantiated into a new in-game entity.</returns>
        </member>
        <member name="M:SMLHelper.Assets.ModPrefab.GetGameObjectAsync(IOut{UnityEngine.GameObject})">
            <summary>
            Gets the prefab game object asynchronously. Set up your prefab components here.
            The <see cref="P:SMLHelper.Assets.ModPrefab.TechType"/> and ClassID are already handled.
            </summary>
            <param name="gameObject"> The game object to be instantiated into a new in-game entity. </param>
        </member>
        <member name="T:SMLHelper.Assets.ModPrefabCache">
            <summary>
            Class that used by <see cref="T:SMLHelper.Assets.ModPrefab"/> to store game objects that used as prefabs.
            Also it can be used by mods directly, e.g. in <see cref="M:SMLHelper.Assets.ModPrefab.GetGameObject"/> to store prefab before returning.
            Game objects in cache are inactive and will not be on scene.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.ModPrefabCache.AddPrefab(UnityEngine.GameObject,System.Boolean)">
            <summary> Add prefab to cache </summary>
            <param name="prefab"> Prefab to add. </param>
            <param name="autoremove">
            Is prefab needed to be removed from cache after use.
            Prefabs without autoremove flag can be safely deleted by <see cref="M:UnityEngine.Object.Destroy(UnityEngine.Object)" />
            </param>
        </member>
        <member name="M:SMLHelper.Assets.ModPrefabCache.AddPrefabCopy(UnityEngine.GameObject,System.Boolean)">
            <summary> Add prefab copy to cache (instatiated copy will not run 'Awake') </summary>
            <param name="prefab"> Prefab to copy and add. </param>
            <param name="autoremove">
            Is prefab copy needed to be removed from cache after use.
            Prefabs without autoremove flag can be safely deleted by <see cref="M:UnityEngine.Object.Destroy(UnityEngine.Object)" />
            </param>
            <returns> Prefab copy </returns>
        </member>
        <member name="T:SMLHelper.Assets.PdaItem">
            <summary>
            A <see cref="T:SMLHelper.Assets.Spawnable"/> item that appears in the PDA blueprints.
            </summary>
            <seealso cref="T:SMLHelper.Assets.Spawnable" />
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.RequiredForUnlock">
            <summary>
            Override to set the <see cref="T:TechType"/> that must first be scanned or picked up to unlock the blueprint for this item.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.CompoundTechsForUnlock">
            <summary>
            Override to set multiple <see cref="T:TechType"/>s that must first be scanned or picked up to unlock the blueprint for this item.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.AddScannerEntry">
            <summary>
            Override to add a scanner entry to the <see cref="P:SMLHelper.Assets.PdaItem.RequiredForUnlock"/> TechType if it does not have one.
            WARNING. You can overwrite an existing entry with this. Use with Caution as this can break recipe unlocks of the original! 
            Default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.FragmentsToScan">
            <summary>
            Override to set the number of <see cref="P:SMLHelper.Assets.PdaItem.RequiredForUnlock"/> that must be scanned to unlock;
            If not overriden, Default value is <see langword="1 fragment"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.TimeToScanFragment">
            <summary>
            Override to set the speed that the <see cref="P:SMLHelper.Assets.PdaItem.RequiredForUnlock"/> fragments are scanned;
            If not overriden, Default value is <see langword="2 seconds"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.DestroyFragmentOnScan">
            <summary>
            Override to allow fragments to be scanned for materials after the relavent TechType is already Unlocked.
            Default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.EncyclopediaEntryData">
            <summary>
            Override to add a <see cref="T:PDAEncyclopedia.EntryData"/> into the PDA's Encyclopedia for this object.
            WARNING. You can overwrite an existing entry with this. Use with Caution! 
            Default is <see langword="Null"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.GroupForPDA">
            <summary>
            Override with the main group in the PDA blueprints where this item appears.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.CategoryForPDA">
            <summary>
            Override with the category within the group in the PDA blueprints where this item appears.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.UnlockedAtStart">
            <summary>
            Override this property to assign whether or not the <see cref="T:TechType"/> should be unlocked at the start, defaulted to <c><see cref="P:SMLHelper.Assets.PdaItem.RequiredForUnlock"/> == <see cref="F:TechType.None"/></c>
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.PdaItem.DiscoverMessage">
            <summary>
            Message which should be shown when the item is unlocked. <para/>
            If not overridden, the message will default to Subnautica's (language key "<see langword="NotificationBlueprintUnlocked"/>").
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.PdaItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Assets.PdaItem"/>, the basic class for any item that appears among your PDA blueprints.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType" /> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="M:SMLHelper.Assets.PdaItem.GetBlueprintRecipe">
            <summary>
            This provides the <see cref="T:SMLHelper.Crafting.TechData"/> instance used to designate how this item is crafted or constructed.
            </summary>
        </member>
        <member name="T:SMLHelper.Assets.Spawnable">
            <summary>
            An item that can be spawned into the game.
            </summary>
            <seealso cref="T:SMLHelper.Assets.ModPrefab"/>
        </member>
        <member name="T:SMLHelper.Assets.Spawnable.PatchEvent">
            <summary>
            A simple delegate type that takes no parameters and returns void.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.AssetsFolder">
            <summary>
            Override with the folder where your mod's icons and other assets are stored.
            By default, this will point to the same folder where your mod DLL is.
            </summary>
            <example>"MyModAssembly/Assets"</example>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.IconFileName">
            <summary>
            Override with the file name for this item's icon.
            If not overriden, this defaults to "[this item's ClassID].png".
            </summary>
            <example>"MyClassID.png"</example>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.FriendlyName">
            <summary>
            The in-game name of this spawnable item.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.Description">
            <summary>
            The description text when viewing this spawnable item from the inventory or crafting UI.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.IsPatched">
            <summary>
            Returns <c>true</c> if this spawnable item has already been patched; Otherwise <c>false</c>.
            This will become <c>true</c> after the <seealso cref="M:SMLHelper.Assets.Spawnable.Patch"/> method has finished running.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.SizeInInventory">
            <summary>
            Returns the size that this entity will occupy inside the player inventory.<br/>
            By default this will be 1x1. Override to change the size.
            </summary>
        </member>
        <member name="T:SMLHelper.Assets.Spawnable.SpawnLocation">
            <summary>
            A lightweight class used to specify the position of a Coordinated Spawn and optionally set its rotation.
            </summary>
            <param name="position"></param>
            <param name="eulerAngles"></param>
        </member>
        <member name="M:SMLHelper.Assets.Spawnable.SpawnLocation.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            A lightweight class used to specify the position of a Coordinated Spawn and optionally set its rotation.
            </summary>
            <param name="position"></param>
            <param name="eulerAngles"></param>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.SpawnLocation.position">
            <summary></summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.SpawnLocation.eulerAngles">
            <summary></summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.CoordinatedSpawns">
            <summary>
            Returns the list of <see cref="T:SMLHelper.Assets.Spawnable.SpawnLocation"/>s that specify the prefab's Coordinated Spawns.<br/>
            By default this will be null.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.BiomesToSpawnIn">
            <summary>
            Returns the List of BiomeData that handles what Biomes this prefab will spawn, how probable it is to spawn there and how many per spawn.
            By default this will be null. Override to change this.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.EntityInfo">
            <summary>
            Returns the <see cref="T:UWE.WorldEntityInfo"/> of this object if it has one.
            By default this will be null. Override to change this.
            </summary>
        </member>
        <member name="P:SMLHelper.Assets.Spawnable.HasSprite">
            <summary>
            Gets a value indicating whether if we should be looking for a Sprite when NOT overriding <see cref="M:SMLHelper.Assets.Spawnable.GetItemSprite"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.Spawnable.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Assets.Spawnable"/>, the basic class needed for any item that can be spawned into the Subnautica game world.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType"/> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="F:SMLHelper.Assets.Spawnable.OnStartedPatching">
            <summary>
            This event triggers <c>before</c> the core patching methods begins.
            You can attach simple <seealso cref="T:SMLHelper.Assets.Spawnable.PatchEvent"/> methods to this event if you want to run code <c>before</c> the any of the core patching methods begin.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.Spawnable.CorePatchEvents">
            <summary>
            The main patching methods are executed here.
            This event should only be used by the SMLHelper QuickStart classes.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.Spawnable.OnFinishedPatching">
            <summary>
            This event triggers <c>after</c> the core patching methods begins.
            You can attach simple <seealso cref="T:SMLHelper.Assets.Spawnable.PatchEvent"/> methods to this event if you want to run code <c>after</c> the core patching methods have finished.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.Spawnable.Patch">
            <summary>
            Starts all patching code in SMLHelper.
            If <seealso cref="P:SMLHelper.Assets.Spawnable.IsPatched"/> is <c>true</c> then this method is skipped to avoid duplicate patching.
            </summary>
            <seealso cref="F:SMLHelper.Assets.Spawnable.OnStartedPatching"/>
            <seealso cref="F:SMLHelper.Assets.Spawnable.OnFinishedPatching"/>
        </member>
        <member name="M:SMLHelper.Assets.Spawnable.GetItemSprite">
            <summary>
            Determines thee <see cref="T:Atlas.Sprite"/> to be used for this spawnable's icon.<para/>
            Default behavior will look for a PNG file named <see cref="P:SMLHelper.Assets.Spawnable.IconFileName"/> inside <see cref="P:SMLHelper.Assets.Spawnable.AssetsFolder"/>.
            </summary>
            <returns>Returns the <see cref="T:Atlas.Sprite"/> that will be used in the <see cref="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,Atlas.Sprite)"/> call.</returns>
        </member>
        <member name="T:SMLHelper.Assets.ModSprite">
            <summary>
            A class that handles a custom sprite and what item it is associated to.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.ModSprite.TechType">
            <summary>
            The tech type of a specific item associated with this sprite.
            Can be <see cref="F:TechType.None"/> if this sprite is for used on a group.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.ModSprite.Sprite">
            <summary>
            The actual sprite used in-game when this sprite is references.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.ModSprite.Group">
            <summary>
            The group that this sprite belongs to. 
            Can be <see cref="F:SpriteManager.Group.None"/> if this sprite is for used on an item.
            </summary>
        </member>
        <member name="F:SMLHelper.Assets.ModSprite.Id">
            <summary>
            The internal identifier of this sprite when it isn't associated to an item.
            </summary>
        </member>
        <member name="M:SMLHelper.Assets.ModSprite.#ctor(TechType,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific TechType.
            Created with an Atlas Sprite.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:SMLHelper.Assets.ModSprite.#ctor(SpriteManager.Group,System.String,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with an Atlas Sprite.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:SMLHelper.Assets.ModSprite.#ctor(SpriteManager.Group,TechType,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with an Atlas Sprite.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:SMLHelper.Assets.ModSprite.#ctor(SpriteManager.Group,System.String,UnityEngine.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with a UnityEngine Sprite.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:SMLHelper.Assets.ModSprite.#ctor(TechType,UnityEngine.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific TechType.
            Created with a UnityEngine Sprite.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="T:SMLHelper.Commands.ConsoleCommand">
            <summary>
            Represents a console command.
            </summary>
        </member>
        <member name="P:SMLHelper.Commands.ConsoleCommand.Trigger">
            <summary>
            The string that triggers the command.
            </summary>
        </member>
        <member name="P:SMLHelper.Commands.ConsoleCommand.ModName">
            <summary>
            The QMod that registered the command.
            </summary>
        </member>
        <member name="P:SMLHelper.Commands.ConsoleCommand.Parameters">
            <summary>
            The parameters for the command.
            </summary>
        </member>
        <member name="P:SMLHelper.Commands.ConsoleCommand.ParameterTypes">
            <summary>
            The types of the parameters.
            </summary>
        </member>
        <member name="M:SMLHelper.Commands.ConsoleCommand.#ctor(System.String,System.Reflection.MethodInfo,System.Boolean,System.Object)">
            <summary>
            Creates an instance of <see cref="T:SMLHelper.Commands.ConsoleCommand"/>.
            </summary>
            <param name="trigger">The string that triggers the command.</param>
            <param name="targetMethod">The method targeted by the command.</param>
            <param name="isDelegate">Whether or not the method is a delegate.</param>
            <param name="instance">The instance the method belongs to.</param>
        </member>
        <member name="M:SMLHelper.Commands.ConsoleCommand.HasValidInvoke">
            <summary>
            Determines whether the targeted method is valid in terms of whether it is static or delegate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Commands.ConsoleCommand.HasValidParameterTypes">
            <summary>
            Determines whether the target methods parameters are valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Commands.ConsoleCommand.GetInvalidParameters">
            <summary>
            Returns a list of all invalid parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Commands.ConsoleCommand.TryParseParameters(System.Collections.Generic.IEnumerable{System.String},System.Object[]@)">
            <summary>
            Attempts to parse input parameters into appropriate types as defined in the target method.
            </summary>
            <param name="inputParameters">The parameters as input by the user.</param>
            <param name="parsedParameters">The parameters that have been successfully parsed.</param>
            <returns>Whether or not all parameters were succesfully parsed.</returns>
        </member>
        <member name="M:SMLHelper.Commands.ConsoleCommand.Invoke(System.Object[])">
            <summary>
            Invokes the command with the given parameters.
            </summary>
            <param name="parameters">The command parameters.</param>
            <returns>The string returned from the command.</returns>
        </member>
        <member name="T:SMLHelper.Commands.ConsoleCommandAttribute">
            <summary>
            Attribute used to signify the decorated method should be called in response to a console command.
            
            <para>Decorated method must be both <see langword="public"/> and <see langword="static"/>.</para>
            </summary>
            <remarks>
            <para>The command can take parameters and will respect optional parameters as outlined in the method's signature.<br/>
            Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If the method has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])"/>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)"/>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)"/>
            <seealso cref="T:SMLHelper.Handlers.ConsoleCommandsHandler"/>
        </member>
        <member name="P:SMLHelper.Commands.ConsoleCommandAttribute.Command">
            <summary>
            The unique, case-insensitive command that when entered, will call the decorated method.
            </summary>
        </member>
        <member name="M:SMLHelper.Commands.ConsoleCommandAttribute.#ctor(System.String)">
            <summary>
            <para>Signifies the decorated method should be called when the given <paramref name="command"/> is entered
            in the dev console.</para>
            
            <para>Decorated method must be both <see langword="public"/> and <see langword="static"/>.</para>
            </summary>
            <remarks>
            <para>The command can take parameters and will respect optional parameters as outlined in the method's signature.<br/>
            Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If the method has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <param name="command">The unique, case-insensitive command that when entered into the dev console will call the
            decorated method.</param>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])"/>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)"/>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)"/>
            <seealso cref="T:SMLHelper.Handlers.ConsoleCommandsHandler"/>
        </member>
        <member name="T:SMLHelper.Crafting.ModCraftTreeCraft">
            <summary>
            A crafting node of a CraftTree. This is the last node on a tree; The one that actually crafts something.
            </summary>
            <seealso cref="T:SMLHelper.Crafting.ModCraftTreeNode" />
        </member>
        <member name="T:SMLHelper.Crafting.ModCraftTreeLinkingNode">
            <summary>
            Abstract class that provides methods for adding new nodes into the crafting tree.
            </summary>
            <seealso cref="T:SMLHelper.Crafting.ModCraftTreeNode" />
        </member>
        <member name="F:SMLHelper.Crafting.ModCraftTreeLinkingNode.ChildNodes">
            <summary>
            The child nodes linked bellow this node.
            </summary>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String,System.String,Atlas.Sprite)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <param name="displayText">The hover text to display in-game.</param>
            <param name="sprite">The custom sprite to display on this tab node.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <param name="displayText">The hover text to display in-game.</param>
            <param name="sprite">The custom sprite to display on this tab node.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.GetTabNode(System.String)">
            <summary>
            Gets the tab from the calling node.
            </summary>
            <param name="nameID">The name id of the tab to get.</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.GetCraftingNode(TechType)">
            <summary>
            Gets the crafting node from the calling node.
            </summary>
            <param name="techType">The TechType whose node to get.</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.GetNode(System.String)">
            <summary>
            Gets the node associated with the ID specified. Used if you don't know whether node is a tab or a craft node.
            </summary>
            <param name="nameID"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(TechType)">
            <summary>
            Creates a new crafting node for the crafting tree and links it to the calling node.
            </summary>
            <param name="techType">The TechType to be crafted.</param>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(TechType[])">
            <summary>
            Creates a collection of new crafting nodes for the crafting tree and links it to the calling node.
            </summary>
            <param name="techTypes">The TechTypes to be crafted.</param>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Creates a collection of new crafting nodes for the crafting tree and links it to the calling node.
            </summary>
            <param name="techTypes">The TechTypes to be crafted.</param>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeLinkingNode.AddModdedCraftingNode(System.String)">
            <summary>
            <para>Creates a new crafting node for a modded item and links it to the calling node.</para>
            <para>If the modded item isn't present for the player, this call is safely ignored.</para>
            </summary>
            <param name="moddedTechTypeName">The internal name of the custom TechType to be crafted.</param>
            <remarks>
            If the player doesn't have the mod for this TechType installed, then nothing will happen.
            </remarks>
        </member>
        <member name="T:SMLHelper.Crafting.ModCraftTreeNode">
            <summary>
            Basic data structure of a crafting tree node.
            </summary>
        </member>
        <member name="F:SMLHelper.Crafting.ModCraftTreeNode.Action">
            <summary>
            The action this node takes in the crafting tree.
            </summary>
        </member>
        <member name="F:SMLHelper.Crafting.ModCraftTreeNode.TechType">
            <summary>
            The tech type ID associated to this node.
            For item nodes, it is the item ID to be crafted.
            For root and tab nodes, this is always <see cref="F:TechType.None"/>.
            </summary>
        </member>
        <member name="F:SMLHelper.Crafting.ModCraftTreeNode.Name">
            <summary>
            The name ID for this tab node.
            </summary>
        </member>
        <member name="F:SMLHelper.Crafting.ModCraftTreeNode.CraftNode">
            <summary>
            The the in-game representation of this node.
            </summary>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeNode.RemoveNode">
            <summary>
            Removes the calling node from parent. 
            </summary>
        </member>
        <member name="T:SMLHelper.Crafting.ModCraftTreeRoot">
            <summary>
            The root node of a CraftTree. The whole tree starts here.<para/>
            Build up your custom crafting tree from this root node using the AddCraftingNode and AddTabNode methods.<br/>
            This tree will be automatically patched into the game. No further calls into <see cref="T:SMLHelper.Handlers.CraftTreeHandler"/> required.<para/>
            For more advanced usage, you can replace the default value of <see cref="F:SMLHelper.Crafting.ModCraftTreeRoot.CraftTreeCreation"/> with your own custom function.        
            </summary>    
            <seealso cref="T:SMLHelper.Crafting.ModCraftTreeLinkingNode" />
        </member>
        <member name="P:SMLHelper.Crafting.ModCraftTreeRoot.CustomCraftingTree">
            <summary>
            Dynamically creates the CraftTree object for this crafting tree.
            The CraftNode objects were created and linked as the classes of the ModCraftTreeFamily were created and linked.
            </summary>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeRoot.CreateFromExistingTree(CraftNode,SMLHelper.Crafting.ModCraftTreeLinkingNode@)">
            <summary>
            Populates a new ModCraftTreeRoot from a CraftNode tree.
            </summary>
            <param name="tree">The tree to create the ModCraftTreeRoot from.</param>
            <param name="root"></param>
        </member>
        <member name="F:SMLHelper.Crafting.ModCraftTreeRoot.CraftTreeCreation">
            <summary>
            The craft tree creation function.<br/>
            Default implementaion returns a new <see cref="T:CraftTree"/> instantiated with <see cref="P:SMLHelper.Crafting.ModCraftTreeRoot.SchemeAsString"/> and the root <see cref="T:CraftNode"/>.<para/>
            You can replace this function with your own to have more control of the crafting tree when it is being created.
            </summary>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeRoot.GetTabNode(System.String[])">
            <summary>
            Gets the tab node at the specified path from the root.
            </summary>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>
            <returns>If the specified tab node is found, returns that <see cref="T:SMLHelper.Crafting.ModCraftTreeTab"/>; Otherwise, returns null.</returns>
        </member>
        <member name="M:SMLHelper.Crafting.ModCraftTreeRoot.GetNode(System.String[])">
            <summary>
            Gets the node at the specified path from the root.
            </summary>
            <param name="stepsToNode">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>
            <returns>If the specified tab node is found, returns that <see cref="T:SMLHelper.Crafting.ModCraftTreeNode"/>; Otherwise, returns null.</returns>
        </member>
        <member name="T:SMLHelper.Crafting.ModCraftTreeTab">
            <summary>
            A tab node of a CraftTree. Tab nodes help organize crafting nodes by grouping them into categories.
            </summary>
            <seealso cref="T:SMLHelper.Crafting.ModCraftTreeLinkingNode" />
        </member>
        <member name="T:SMLHelper.Crafting.TechData">
            <summary>
            A class that fully describes a recipe for a <see cref="T:TechType"/> identified item.
            </summary>
            <seealso cref="T:ITechData" />
        </member>
        <member name="P:SMLHelper.Crafting.TechData.craftAmount">
            <summary>
            Gets or sets the how many copies of the item are created when crafting this recipe.
            </summary>
            <value>
            The quantity of the item this recipe yields.
            </value>
        </member>
        <member name="P:SMLHelper.Crafting.TechData.ingredientCount">
            <summary>
            Gets the number of different ingredients for this recipe.
            </summary>
            <value>
            The number of ingredients for this recipe.
            </value>
        </member>
        <member name="P:SMLHelper.Crafting.TechData.linkedItemCount">
            <summary>
            Gets the number of items linked to this recipe.
            </summary>
            <value>
            The number of linked items.
            </value>
        </member>
        <member name="F:SMLHelper.Crafting.TechData.Ingredients">
            <summary>
            The list of ingredients required for this recipe.
            </summary>
        </member>
        <member name="F:SMLHelper.Crafting.TechData.LinkedItems">
            <summary>
            The items that will also be created when this recipe is crafted.
            </summary>
        </member>
        <member name="M:SMLHelper.Crafting.TechData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLHelper.Crafting.TechData"/> class a custom recipe.
            </summary>
        </member>
        <member name="M:SMLHelper.Crafting.TechData.#ctor(System.Collections.Generic.List{SMLHelper.Crafting.Ingredient})">
            <summary>
            Initializes a new instance of the <see cref="T:SMLHelper.Crafting.TechData"/> class for a custom recipe with a list of ingridients.
            </summary>
            <param name="ingredients">The ingredients.</param>
        </member>
        <member name="M:SMLHelper.Crafting.TechData.#ctor(SMLHelper.Crafting.Ingredient[])">
            <summary>
            Initializes a new instance of the <see cref="T:SMLHelper.Crafting.TechData"/> class for a custom recipe with a collection of ingridients.
            </summary>
            <param name="ingredients">The ingredients.</param>
        </member>
        <member name="M:SMLHelper.Crafting.TechData.GetIngredient(System.Int32)">
            <summary>
            Gets the ingredient at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:IIngredient"/> at the requested the index if the index is value; Otherwise returns null.</returns>
        </member>
        <member name="M:SMLHelper.Crafting.TechData.GetLinkedItem(System.Int32)">
            <summary>
            Gets the linked item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:TechType"/> at the requested the index if the index is value; Otherwise returns null.</returns>
        </member>
        <member name="T:SMLHelper.Crafting.Ingredient">
            <summary>
            A class for representing a required ingredient in a recipe.
            </summary>
            <seealso cref="T:IIngredient" />
            <seealso cref="T:SMLHelper.Crafting.TechData"/>
        </member>
        <member name="P:SMLHelper.Crafting.Ingredient.techType">
            <summary>
            Gets or sets the item ID.
            </summary>
            <value>
            The item ID.
            </value>
        </member>
        <member name="P:SMLHelper.Crafting.Ingredient.amount">
            <summary>
            Gets or sets the number of this item required for the recipe.
            </summary>
            <value>
            The amount of this item needed for the recipe.
            </value>
        </member>
        <member name="M:SMLHelper.Crafting.Ingredient.#ctor(TechType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLHelper.Crafting.Ingredient"/> class.
            </summary>
            <param name="techType">The item ID.</param>
            <param name="amount">The number of instances of this item required for the recipe.</param>
        </member>
        <member name="T:SMLHelper.FMod.FModMultiSounds">
            <summary>
            This class is used to register FMOD events with multiple sounds in one event.
            </summary>
        </member>
        <member name="F:SMLHelper.FMod.FModMultiSounds.randomizeSounds">
            <summary>
            Makes the sounds play in a randomized order. when <c>false</c>, sounds will play subsequently.
            </summary>
        </member>
        <member name="M:SMLHelper.FMod.FModMultiSounds.#ctor(FMOD.Sound[],System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:SMLHelper.FMod.FModMultiSounds"/>. Used to register FMOD events with multiple sounds in one event.
            </summary>
            <param name="sounds">The sounds to register for this object. Please ensure that none of the sounds are on <see cref="F:FMOD.MODE.LOOP_NORMAL"/> or <see cref="F:FMOD.MODE.LOOP_BIDI"/> modes.</param>
            <param name="busPath"><see cref="T:FMOD.Studio.Bus"/> path to play these sounds under.</param>
            <param name="randomizeSounds">Makes the sounds play in a randomized order. when <c>false</c>, sounds will play subsequently.</param>
        </member>
        <member name="M:SMLHelper.FMod.FModMultiSounds.#ctor(UnityEngine.AudioClip[],FMOD.MODE,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:SMLHelper.FMod.FModMultiSounds"/>. Used to register FMOD events with multiple sounds in one event.
            </summary>
            <param name="clips">The clips to register for this object.</param>
            <param name="mode">The mode to set the clips to. Cannot be <c>MODE.LOOP_NORMAL</c> or <c>MODE.LOOP_BIDI</c>.</param>
            <param name="busPath"><see cref="T:FMOD.Studio.Bus"/> path to play these sounds under.</param>
            <param name="randomizeSounds">Makes the sounds play in a randomized order. when <c>false</c>, sounds will play subsequently.</param>
        </member>
        <member name="M:SMLHelper.FMod.FModMultiSounds.#ctor(System.String[],FMOD.MODE,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:SMLHelper.FMod.FModMultiSounds"/>. Used to register FMOD events with multiple sounds in one event.
            </summary>
            <param name="soundPaths">The sound paths to register for this object. Paths must be relative to the base game folder.</param>
            <param name="mode">The mode to set the clips to. Cannot be <c>MODE.LOOP_NORMAL</c> or <c>MODE.LOOP_BIDI</c>.</param>
            <param name="busPath"><see cref="T:FMOD.Studio.Bus"/> path to play these sounds under.</param>
            <param name="randomizeSounds">Makes the sounds play in a randomized order. when <c>false</c>, sounds will play subsequently.</param>
        </member>
        <member name="T:SMLHelper.FMod.Interfaces.IFModSound">
            <summary>
            This interface is used to integrate with <see cref="T:SMLHelper.Handlers.CustomSoundHandler"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.FMod.Interfaces.IFModSound.PlaySound">
            <summary>
            Defines how to play sound in this object.
            </summary>
            <returns>The channel the sound was played on</returns>
        </member>
        <member name="T:SMLHelper.Handlers.BackgroundTypeHandler">
            <summary>
            A handler for everything related to creating new BackgroundTypes.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.BackgroundTypeHandler.AddBackgroundType(System.String,Atlas.Sprite)">
            <summary>
            adds a new <see cref="T:CraftData.BackgroundType"/> into the game.
            </summary>
            <param name="backgroundTypeName">the name of the BackgroundType, should not contain special characters.</param>
            <param name="backgroundSprite">The sprite for this BackgroundType.</param>
            <returns>The new <see cref="T:CraftData.BackgroundType"/> that's created.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.BackgroundTypeHandler.TryGetModdedBackgroundType(System.String,CraftData.BackgroundType@)">
            <summary>
            Safely looks for a modded Background Type from another mod in the SMLHelper BackgroundTypeCache and outputs its <see cref="T:CraftData.BackgroundType" /> value when found.
            </summary>
            <param name="backgroundTypeString">The string used to define the BackgroundType</param>
            <param name="modBackgroundType">The BackgroundType enum value of the modded. Defaults to <see cref="F:CraftData.BackgroundType.Normal" /> when the item was not found.</param>
            <returns><see langword="true"/> if the item was found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.BackgroundTypeHandler.ModdedBackgroundTypeExists(System.String)">
            <summary>
            Safely looks for a modded Background Type from another mod in the SMLHelper BackgroundTypeCache.
            </summary>
            <param name="backgroundTypeString">The string used to define the BackgroundType.</param>
            <returns><see langword="true"/> if the item was found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SMLHelper.Handlers.ConsoleCommandsHandler">
            <summary>
            A handler class for registering your custom console commands.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])">
            <summary>
            Registers your custom console command by targeting a <see langword="public"/> <see langword="static"/> method.
            </summary>
            <remarks>
            <para>Target method must be <see langword="static"/>.</para>
            
            <para>The command can take parameters and will respect optional parameters as outlined in the method's signature.<br/>
            Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If the method has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <param name="command">The case-insensitive command to register.</param>
            <param name="declaringType">The declaring type that holds the method to call when the command is entered.</param>
            <param name="methodName">The name of the method to call within the declaring type when the command is entered. 
            Method must be <see langword="static"/>.</param>
            <param name="parameters">The parameter types the method receives, for targeting overloads.</param>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)"/>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)"/>
            <seealso cref="T:SMLHelper.Commands.ConsoleCommandAttribute"/>
        </member>
        <member name="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)">
            <summary>
            Registers your custom console command by passing a <see langword="delegate"/>.
            </summary>
            <remarks>
            <para>Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If the delegate has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="command">The case-insensitive command to register.</param>
            <param name="callback">The callback to handle the command.</param>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])"/>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)"/>
            <seealso cref="T:SMLHelper.Commands.ConsoleCommandAttribute"/>
        </member>
        <member name="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)">
            <summary>
            Registers <see langword="public"/> <see langword="static"/> methods decorated with the
            <see cref="T:SMLHelper.Commands.ConsoleCommandAttribute"/> within the <paramref name="type"/> as console commands.
            </summary>
            <remarks>
            <para>Target methods must be <see langword="static"/>.</para>
            
            <para>Commands can take parameters and will respect optional parameters as outlined in the method's signature.<br/>
            Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If a decorated method has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])"/>
            <seealso cref="M:SMLHelper.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)"/>
            <seealso cref="T:SMLHelper.Commands.ConsoleCommandAttribute"/>
        </member>
        <member name="T:SMLHelper.Handlers.CoordinatedSpawnsHandler">
            <summary>
            a Handler that handles and registers Coordinated (<see cref="T:UnityEngine.Vector3"/> spawns).
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.CoordinatedSpawnsHandler.RegisterCoordinatedSpawnsForOneTechType(TechType,System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            Registers Multiple Coordinated spawns for one single passed TechType
            </summary>
            <param name="techTypeToSpawn">The TechType to spawn</param>
            <param name="coordinatesToSpawnTo">the coordinates the <see cref="T:TechType"/> should spawn to</param>
        </member>
        <member name="M:SMLHelper.Handlers.CoordinatedSpawnsHandler.RegisterCoordinatedSpawn(SMLHelper.Handlers.SpawnInfo)">
            <summary>
            Registers a Coordinated Spawn
            </summary>
            <param name="spawnInfo">the SpawnInfo to spawn</param>
        </member>
        <member name="M:SMLHelper.Handlers.CoordinatedSpawnsHandler.RegisterCoordinatedSpawns(System.Collections.Generic.List{SMLHelper.Handlers.SpawnInfo})">
            <summary>
            registers Many Coordinated Spawns.
            </summary>
            <param name="spawnInfos">The SpawnInfos to spawn.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CoordinatedSpawnsHandler.RegisterCoordinatedSpawnsForOneTechType(TechType,System.Collections.Generic.Dictionary{UnityEngine.Vector3,UnityEngine.Vector3})">
            <summary>
            Registers Multiple Coordinated spawns with rotations for one single passed TechType
            </summary>
            <param name="techTypeToSpawn">The TechType to spawn</param>
            <param name="coordinatesAndRotationsToSpawnTo">the coordinates(Key) and the rotations(Value) the <see cref="T:TechType"/> should spawn to</param>
        </member>
        <member name="T:SMLHelper.Handlers.SpawnInfo">
            <summary>
            A basic struct that provides enough info for the <see cref="T:SMLHelper.Handlers.CoordinatedSpawnsHandler"/> System to function.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.#ctor(TechType,UnityEngine.Vector3)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Handlers.SpawnInfo"/>.
            </summary>
            <param name="techType">TechType to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.#ctor(System.String,UnityEngine.Vector3)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Handlers.SpawnInfo"/>.
            </summary>
            <param name="classId">ClassID to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.#ctor(TechType,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Handlers.SpawnInfo"/>.
            </summary>
            <param name="techType">TechType to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
            <param name="rotation">Rotation to spawn at.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.#ctor(System.String,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Handlers.SpawnInfo"/>.
            </summary>
            <param name="classId">ClassID to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
            <param name="rotation">Rotation to spawn at.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.#ctor(TechType,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Handlers.SpawnInfo"/>.
            </summary>
            <param name="techType">TechType to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
            <param name="rotation">Rotation to spawn at.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.#ctor(System.String,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes a new <see cref="T:SMLHelper.Handlers.SpawnInfo"/>.
            </summary>
            <param name="classId">ClassID to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
            <param name="rotation">Rotation to spawn at.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <remarks>
            It is worth noting that we use Unity's <see cref="M:UnityEngine.Vector3.op_Equality(UnityEngine.Vector3,UnityEngine.Vector3)"/> and <see cref="M:UnityEngine.Quaternion.op_Equality(UnityEngine.Quaternion,UnityEngine.Quaternion)"/>
            operator comparisons for comparing the <see cref="P:SMLHelper.Handlers.SpawnInfo.SpawnPosition"/> and <see cref="P:SMLHelper.Handlers.SpawnInfo.Rotation"/> properties of each instance, 
            to allow for an approximate comparison of these values.
            </remarks>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:SMLHelper.Handlers.SpawnInfo"/> and represents the same
            value as this instance; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:SMLHelper.Handlers.SpawnInfo.Equals(SMLHelper.Handlers.SpawnInfo)"/>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.GetHashCode">
            <summary>
            A custom hash code algorithm that takes into account the values of each property of the <see cref="T:SMLHelper.Handlers.SpawnInfo"/> instance,
            and attempts to reduce diagonal collisions.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.Equals(SMLHelper.Handlers.SpawnInfo)">
            <summary>
            Indicates whether the current <see cref="T:SMLHelper.Handlers.SpawnInfo"/> is equal to another.
            </summary>
            <remarks>
            It is worth noting that we use Unity's <see cref="M:UnityEngine.Vector3.op_Equality(UnityEngine.Vector3,UnityEngine.Vector3)"/> and <see cref="M:UnityEngine.Quaternion.op_Equality(UnityEngine.Quaternion,UnityEngine.Quaternion)"/>
            operator comparisons for comparing the <see cref="P:SMLHelper.Handlers.SpawnInfo.SpawnPosition"/> and <see cref="P:SMLHelper.Handlers.SpawnInfo.Rotation"/> properties of each instance, 
            to allow for an approximate comparison of these values.
            </remarks>
            <param name="other">The other <see cref="T:SMLHelper.Handlers.SpawnInfo"/>.</param>
            <returns><see langword="true"/> if the current <see cref="T:SMLHelper.Handlers.SpawnInfo"/> is equal to the <paramref name="other"/> parameter;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.op_Equality(SMLHelper.Handlers.SpawnInfo,SMLHelper.Handlers.SpawnInfo)">
            <summary>
            Indicates whether two <see cref="T:SMLHelper.Handlers.SpawnInfo"/> instances are equal.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns><see langword="true"/> if the <see cref="T:SMLHelper.Handlers.SpawnInfo"/> instances are equal; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:SMLHelper.Handlers.SpawnInfo.op_Inequality(SMLHelper.Handlers.SpawnInfo,SMLHelper.Handlers.SpawnInfo)"/>
            <seealso cref="M:SMLHelper.Handlers.SpawnInfo.Equals(SMLHelper.Handlers.SpawnInfo)"/>
        </member>
        <member name="M:SMLHelper.Handlers.SpawnInfo.op_Inequality(SMLHelper.Handlers.SpawnInfo,SMLHelper.Handlers.SpawnInfo)">
            <summary>
            Indicates whether two <see cref="T:SMLHelper.Handlers.SpawnInfo"/> instances are not equal.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns><see langword="true"/> if the <see cref="T:SMLHelper.Handlers.SpawnInfo"/> instances are not equal; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:SMLHelper.Handlers.SpawnInfo.op_Equality(SMLHelper.Handlers.SpawnInfo,SMLHelper.Handlers.SpawnInfo)"/>
            <seealso cref="M:SMLHelper.Handlers.SpawnInfo.Equals(SMLHelper.Handlers.SpawnInfo)"/>
        </member>
        <member name="T:SMLHelper.Handlers.CraftDataHandler">
            <summary>
            A handler class for adding and editing crafted items.
            </summary>
            <summary>
            A handler class for adding and editing crafted items.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.AddToGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder or show in the Blueprints Tab of the PDA.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.AddToGroup(TechGroup,TechCategory,TechType,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder or show in the Blueprints Tab of the PDA.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
            <param name="after">Added TechType will be added after this TechType, for sorting purposes.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.RemoveFromGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to remove an existing TechType from the game's internal group system.
            </summary>
            <param name="group">The TechGroup in which the TechType is located.</param>
            <param name="category">The TechCategory in which the TechType is located.</param>
            <param name="techType">The TechType which you want to remove.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetTechData(TechType,ITechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. TechData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose TechData you want to edit.</param>
            <param name="techData">The TechData for that TechType.</param>
            <seealso cref="T:SMLHelper.Crafting.TechData"/>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetTechData(TechType,SMLHelper.Crafting.TechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. TechData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose TechData you want to edit.</param>
            <param name="techData">The TechData for that TechType.</param>
            <seealso cref="T:SMLHelper.Crafting.TechData"/>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetEquipmentType(TechType,EquipmentType)">
            <summary>
            <para>Allows you to edit EquipmentTypes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose EqiupmentType you want to edit.</param>
            <param name="equipmentType">The EquipmentType for that TechType.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetQuickSlotType(TechType,QuickSlotType)">
            <summary>
            <para>Allows you to edit QuickSlotType for TechTypes. Can be used for existing TechTypes too.</para>
            <para>Careful: This has to be called after <see cref="M:SMLHelper.Handlers.CraftDataHandler.SetTechData(TechType,ITechData)"/> and <see cref="M:SMLHelper.Handlers.CraftDataHandler.SetTechData(TechType,SMLHelper.Crafting.TechData)"/>.</para>
            </summary>
            <param name="techType">The TechType whose QuickSlotType you want to edit.</param>
            <param name="slotType">The QuickSlotType for that TechType.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetHarvestOutput(TechType,TechType)">
            <summary>
            <para>Allows you to edit harvest output, i.e. what TechType you get when you "harvest" a TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose harvest output you want to edit.</param>
            <param name="harvestOutput">The harvest output for that TechType.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetHarvestType(TechType,HarvestType)">
            <summary>
            <para>Allows you to edit how TechTypes are harvested.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose HarvestType you want to edit.</param>
            <param name="harvestType">The HarvestType for that TechType.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetHarvestFinalCutBonus(TechType,System.Int32)">
            <summary>
            <para>Allows you to edit how much additional slices/seeds are given upon last knife hit.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose final cut bonus you want to edit.</param>
            <param name="bonus">The number of additional slices/seeds you'll receive on last cut.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetItemSize(TechType,Vector2int)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="size">The item size for that TechType.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetItemSize(TechType,System.Int32,System.Int32)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="x">The width of the item</param>
            <param name="y">The height of the item</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetCraftingTime(TechType,System.Single)">
            <summary>
            <para>Allows you to edit crafting times for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose crafting time you want to edit.</param>
            <param name="time">The crafting time, in seconds, for that TechType.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetCookedVariant(TechType,TechType)">
            <summary>
            <para>Allows you to edit the cooked creature list, i.e. associate the unedible TechType to the cooked TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="uncooked">The TechType whose cooked creature counterpart to edit.</param>
            <param name="cooked">The cooked creature counterpart for that TechType.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetBackgroundType(TechType,CraftData.BackgroundType)">
            <summary>
            <para>Allows you to edit inventory background colors for TechTypes.</para>
            </summary>
            <param name="techType">The TechType whose BackgroundType you want to edit.</param>
            <param name="backgroundColor">The background color for that TechType.</param>
            <seealso cref="T:CraftData.BackgroundType"/>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.SetEatingSound(TechType,System.String)">
            <summary>
            Sets the eating sound for the provided TechType.
            </summary>
            <param name="consumable">The item being consumed during <see cref="M:Survival.Eat(UnityEngine.GameObject)"/>.</param>
            <param name="soundPath">
            The sound path.
            <para>
            Value values are
            - "event:/player/drink"
            - "event:/player/drink_stillsuit"
            - "event:/player/use_first_aid"
            - "event:/player/eat" (default)
            </para>
            </param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.AddBuildable(TechType)">
            <summary>
            Allows you to add items to the buildable list.
            </summary>
            <param name="techType">The TechType which you want to add to the buildable list.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.GetModdedTechData(TechType)">
            <summary>
            Safely accesses the crafting data from a modded item.<para/>
            WARNING: This method is highly dependent on mod load order. 
            Make sure your mod is loading after the mod whose TechData you are trying to access.
            </summary>
            <param name="techType">The TechType whose TechData you want to access.</param>
            <returns>The ITechData from the modded item if it exists; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.GetTechData(TechType)">
            <summary>
            Safely accesses the crafting data from any item.<para/>
            WARNING: This method is highly dependent on mod load order. 
            Make sure your mod is loading after the mod whose TechData you are trying to access.
            </summary>
            <param name="techType">The TechType whose TechData you want to access.</param>
            <returns>Returns TechData if it exists; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.CraftDataHandler.GetRecipeData(TechType)">
            <summary>
            Safely accesses the crafting data from any item.<para/>
            WARNING: This method is highly dependent on mod load order. 
            Make sure your mod is loading after the mod whose TechData you are trying to access.
            </summary>
            <param name="techType">The TechType whose TechData you want to access.</param>
            <returns>Returns TechData if it exists; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="T:SMLHelper.Handlers.CraftTreeHandler">
            <summary>
            A handler class for creating and editing of crafting trees.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.CreateCustomCraftTreeAndType(System.String,CraftTree.Type@)">
            <summary>
            Your first method call to start a new custom crafting tree.<br/>
            Creating a new CraftTree only makes sense if you're going to use it in a new type of <see cref="T:GhostCrafter"/>.
            </summary>
            <param name="name">The name for the new <see cref="T:CraftTree.Type" /> enum.</param>
            <param name="craftTreeType">The new enum instance for your custom craft tree type.</param>
            <returns>
            Returns the root node for your custom craft tree, as a new <see cref="T:SMLHelper.Crafting.ModCraftTreeRoot"/> instance.<br/>
            Build up your custom crafting tree from this root node.<br/>
            This tree will be automatically patched into the game. No further calls into <see cref="T:SMLHelper.Handlers.CraftTreeHandler"/> required.<para/>
            For more advanced usage, you can replace the default value of <see cref="F:SMLHelper.Crafting.ModCraftTreeRoot.CraftTreeCreation"/> with your own custom function.        
            </returns>
            <seealso cref="T:SMLHelper.Crafting.ModCraftTreeNode"/>
            <seealso cref="T:SMLHelper.Crafting.ModCraftTreeLinkingNode"/>
            <seealso cref="T:SMLHelper.Crafting.ModCraftTreeTab"/>
            <seealso cref="T:SMLHelper.Crafting.ModCraftTreeCraft"/>
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.ModdedCraftTreeTypeExists(System.String)">
            <summary>
            Safely looks for a modded CraftTree Type from another mod in the SMLHelper CraftTreeTypeCache.
            </summary>
            <param name="craftTreeString">The string used to define the modded item's new techtype.</param>
            <returns>
              <c>True</c> if the craft tree was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType,System.String[])">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree, at the provided tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType)">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>        
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:SMLHelper.Handlers.CraftTreeHandler.RemoveNode(CraftTree.Type,System.String[])">
            <summary>
            <para>Removes a node at the specified node location. Can be used to remove either tabs or craft nodes.</para>
            <para>If a tab node is selected, all child nodes to it will also be removed.</para>
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="stepsToNode">
            <para>The steps to the target node.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>This means matching the id of the crafted item or the id of the tab name.</para>
            <para>Do not include "root" in this path.</para>
            </param>
        </member>
        <member name="T:SMLHelper.Handlers.CustomSoundHandler">
            <summary>
            A handler class for adding and overriding Sounds.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,System.String,System.String)">
            <summary>
            Register a Custom sound by file path. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="filePath">The file path on disk of the sound file to load.</param>
            <param name="busPath">The bus path to play the sound on.</param>
            <returns>the <see cref="T:FMOD.Sound"/> loaded</returns>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,System.String,FMOD.Studio.Bus)">
            <summary>
            Register a Custom sound by file path. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="filePath">The file path on disk of the sound file to load.</param>
            <param name="bus">The bus to play the sound on.</param>
            <returns>the <see cref="T:FMOD.Sound"/> loaded</returns>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,UnityEngine.AudioClip,System.String)">
            <summary>
            Register a custom sound by an <see cref="T:UnityEngine.AudioClip"/> instance. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="audio">The AudioClip to register.</param>
            <param name="busPath">The bus path to play the sound on.</param>
            <returns>the <see cref="T:FMOD.Sound"/> loaded</returns>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,UnityEngine.AudioClip,FMOD.Studio.Bus)">
            <summary>
            Register a custom sound by an <see cref="T:UnityEngine.AudioClip"/> instance. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="audio">The AudioClip to register.</param>
            <param name="bus">The bus to play the sound on.</param>
            <returns>the <see cref="T:FMOD.Sound"/> loaded</returns>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,SMLHelper.FMod.Interfaces.IFModSound)">
            <summary>
            Registers a Custom sound by an <see cref="T:SMLHelper.FMod.Interfaces.IFModSound"/> instance. IFModSound instances have custom logic for playing sounds.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="fModSound">The sound IFModSound object to register.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,FMOD.Sound,System.String)">
            <summary>
            Register a Custom sound that has been loaded using AudioUtils. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="sound">The pre loaded sound</param>
            <param name="busPath">The bus path to play the sound on.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,FMOD.Sound,FMOD.Studio.Bus)">
            <summary>
            Register a Custom sound that has been loaded using AudioUtils. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="sound">The pre loaded sound</param>
            <param name="bus">The bus to play the sound on.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.TryPlayCustomSound(System.String,FMOD.Channel@)">
            <summary>
            Try to find and play a custom <see cref="T:FMOD.Sound"/> that has been registered.
            </summary>
            <param name="id">The Id of the custom sound</param>
            <param name="channel">the <see cref="T:FMOD.Channel"/>the sound is playing on.</param>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.TryGetCustomSound(System.String,FMOD.Sound@)">
            <summary>
            Try to get a registered custom <see cref="T:FMOD.Sound"/>.
            </summary>
            <param name="id">The Id of the custom sound</param>
            <param name="sound">Outputs the <see cref="T:FMOD.Sound"/> if found and null if not found.</param>
            <returns>true or false depending on if the id was found</returns>
        </member>
        <member name="M:SMLHelper.Handlers.CustomSoundHandler.TryGetCustomSoundChannel(System.Int32,FMOD.Channel@)">
            <summary>
            Try to get a playing custom sound channel for an emitter
            </summary>
            <param name="id">The emitter's ID, can be retrieved by calling <c>object.GetInstanceID()</c>.</param>
            <param name="channel">Outputs the <see cref="T:FMOD.Channel"/>.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="T:SMLHelper.Handlers.EatableHandler">
            <summary>
            A handler for editing values for eatable classes
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.EatableHandler.ModifyEatable(TechType,System.Single,System.Single,System.Boolean)">
            <summary>
            Use this to change the values of a specific TechType.
            </summary>
            <param name="item">The TechType of the item you want to change.</param>
            <param name="food">The food value you want to change it to.</param>
            <param name="water">The water value you want to change it to.</param>
            <param name="decomposes">Whether or not the item decomposes over time</param>
        </member>
        <member name="T:SMLHelper.Handlers.EquipmentHandler">
            <summary>
            A handler class for everything related to creating new Equipments.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.EquipmentHandler.AddEquipmentType(System.String)">
            <summary>
            Adds a new <see cref="T:Equipment" /> into the game.
            </summary>
            <param name="equipmentName">The name of the Equipment. Should not contain special characters.</param>
            <returns>
            The new <see cref="T:Equipment" /> that is created.
            </returns>
        </member>
        <member name="M:SMLHelper.Handlers.EquipmentHandler.ModdedEquipmentTypeExists(System.String)">
            <summary>
            Safely looks for a modded group from another mod in the SMLHelper EquipmentCache.
            </summary>
            <param name="equipmentString">The string used to define the techgroup.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Handlers.EquipmentHandler.TryGetModdedEquipmentType(System.String,EquipmentType@)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper EquipmentCache and outputs its <see cref="T:Equipment" /> value when found.
            </summary>
            <param name="equipmentString">The string used to define the techgroup.</param>
            <param name="modEquipment">The Equipment enum value of the modded. Defaults to <see cref="F:EquipmentType.None" /> when the item was not found.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:SMLHelper.Handlers.IngameMenuHandler">
            <summary>
            A handler class that offers simple ways to tap into functionality of the in game menu.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOnSaveEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke whenever the player saves the game via the in game menu.
            </summary>
            <param name="onSaveAction">The method to invoke.</param>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOnLoadEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke the <c>first time</c> the player loads a saved game via the in game menu.
            </summary>
            <param name="onLoadAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOnQuitEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke whenever the player quits the game via the in game menu.
            </summary>
            <param name="onQuitAction">The method to invoke.</param>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.UnregisterOnSaveEvent(System.Action)">
            <summary>
            Removes a method previously added through <see cref="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOnSaveEvent(System.Action)"/> so it is no longer invoked when saving the game.<para/>
            If you plan on using this, do not register an anonymous method.
            </summary>
            <param name="onSaveAction">The method invoked.</param>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.UnregisterOnLoadEvent(System.Action)">
            <summary>
            Removes a method previously added through <see cref="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOnLoadEvent(System.Action)"/> so it is no longer invoked when loading the game.<para/>
            If you plan on using this, do not register an anonymous method.
            </summary>
            <param name="onLoadAction">The method invoked.</param>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.UnregisterOnQuitEvent(System.Action)">
            <summary>
            Removes a method previously added through <see cref="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOnSaveEvent(System.Action)"/> so it is no longer invoked when quiting the game.<para/>
            If you plan on using this, do not register an anonymous method.
            </summary>
            <param name="onQuitAction">The method invoked.</param>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOneTimeUseOnSaveEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke the <c>first time</c> the player saves the game via the in game menu.
            </summary>
            <param name="onSaveAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOneTimeUseOnLoadEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke the <c>first time</c> the player loads a saved game via the in game menu.
            </summary>
            <param name="onLoadAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="M:SMLHelper.Handlers.IngameMenuHandler.RegisterOneTimeUseOnQuitEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke the <c>first time</c> the player quits the game via the in game menu.
            </summary>
            <param name="onQuitAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="T:SMLHelper.Handlers.ItemActionHandler">
            <summary>
            A handler class for registering your custom middle click actions for items
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.ItemActionHandler.RegisterLeftClickAction(TechType,System.Action{InventoryItem},System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom left click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> to which the left click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was left-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If ommited, the action will always be called</param>
        </member>
        <member name="M:SMLHelper.Handlers.ItemActionHandler.RegisterMiddleClickAction(TechType,System.Action{InventoryItem},System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom middle click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> which the middle click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was middle-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If ommited, the action will always be called</param>
        </member>
        <member name="T:SMLHelper.Handlers.KnownTechHandler">
            <summary>
            A handler class for configuring custom unlocking conditions for item blueprints.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.UnlockOnStart(TechType)">
            <summary>
            Allows you to unlock a TechType on game start.
            </summary>
            <param name="techType"></param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,FMODAsset)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.SetCompoundUnlock(TechType,System.Collections.Generic.List{TechType})">
            <summary>
            Allows you to set up a custom Compound Unlock requiring multiple techtypes to be unlocked before 1 is.
            ***Note: This will not remove any original unlock and if you need to do so you should use <see cref="M:SMLHelper.Handlers.KnownTechHandler.RemoveAnalysisTechEntryFromSpecific(TechType,System.Collections.Generic.List{TechType})"/> or <see cref="M:SMLHelper.Handlers.KnownTechHandler.RemoveAllCurrentAnalysisTechEntry(TechType)"/>
            </summary>
            <param name="techType"></param>
            <param name="compoundTechsForUnlock"></param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.RemoveAnalysisTechEntryFromSpecific(TechType,System.Collections.Generic.List{TechType})">
            <summary>
            Allows you to remove unlock entries for a <see cref="T:TechType"/> from specific entries.
            </summary>
            <param name="targetTechType">Target <see cref="T:TechType"/> to remove the unlocks for.</param>
            <param name="techTypes">List of <see cref="T:TechType"/> to remove the targetTechType from.</param>
        </member>
        <member name="M:SMLHelper.Handlers.KnownTechHandler.RemoveAllCurrentAnalysisTechEntry(TechType)">
            <summary>
            Allows you to remove all unlock entries from a <see cref="T:TechType"/> to be able to disable or change it to a new unlock.
            ***Note: This is patch time specific so the LAST mod to call this on a techtype will be the only one to control what unlocks said type after its use.***
            </summary>
            <param name="targetTechType">Target <see cref="T:TechType"/> to remove the unlocks for.</param>
        </member>
        <member name="T:SMLHelper.Handlers.LanguageHandler">
            <summary>
            A handler for adding custom language lines.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String)">
            <summary>
            Allows you to define a language entry into the game.
            </summary>
            <param name="lineId">The ID of the entry, this is what is used to get the actual text.</param>
            <param name="text">The actual text related to the entry.</param>
        </member>
        <member name="M:SMLHelper.Handlers.LanguageHandler.SetTechTypeName(TechType,System.String)">
            <summary>
            Allows you to set the display name of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose display name that is to be changed.</param>
            <param name="text">The new display name for the chosen <see cref="T:TechType"/>.</param>
        </member>
        <member name="M:SMLHelper.Handlers.LanguageHandler.SetTechTypeTooltip(TechType,System.String)">
            <summary>
            Allows you to set the tooltip of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose tooltip that is to be changed.</param>
            <param name="text">The new tooltip for the chosen <see cref="T:TechType"/>.</param>
        </member>
        <member name="T:SMLHelper.Handlers.LootDistributionHandler">
            <summary>
            A handler that manages Loot Distribution.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,LootDistributionData.SrcData,UWE.WorldEntityInfo)">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            You must also add the <see cref="T:UWE.WorldEntityInfo"/> into the <see cref="T:UWE.WorldEntityDatabase"/> using <see cref="T:SMLHelper.Handlers.WorldEntityDatabaseHandler"/>.
            </summary>
            <param name="data">The <see cref="T:LootDistributionData.SrcData"/> that contains data related to the spawning of a prefab, also contains the path to the prefab.</param>
            <param name="classId">The classId of the prefab.</param>
            <param name="info">The WorldEntityInfo of the prefab. For more information on how to set this up, see <see cref="T:SMLHelper.Handlers.WorldEntityDatabaseHandler"/>.</param>
        </member>
        <member name="M:SMLHelper.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,System.String,System.Collections.Generic.IEnumerable{LootDistributionData.BiomeData})">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            You must also add the <see cref="T:UWE.WorldEntityInfo"/> into the <see cref="T:UWE.WorldEntityDatabase"/> using <see cref="T:SMLHelper.Handlers.WorldEntityDatabaseHandler"/>.
            </summary>
            <param name="classId">The classId of the prefab.</param>
            <param name="prefabPath">The prefab path of the prefab.</param>
            <param name="biomeDistribution">The <see cref="T:LootDistributionData.BiomeData"/> dictating how the prefab should spawn in the world.</param>
        </member>
        <member name="M:SMLHelper.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,System.String,System.Collections.Generic.IEnumerable{LootDistributionData.BiomeData},UWE.WorldEntityInfo)">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            </summary>
            <param name="classId">The classId of the prefab.</param>
            <param name="prefabPath">The prefab path of the prefab.</param>
            <param name="biomeDistribution">The <see cref="T:LootDistributionData.BiomeData"/> dictating how the prefab should spawn in the world.</param>
            <param name="info">The WorldEntityInfo of the prefab. For more information on how to set this up, see <see cref="T:SMLHelper.Handlers.WorldEntityDatabaseHandler"/>.</param>
        </member>
        <member name="M:SMLHelper.Handlers.LootDistributionHandler.AddLootDistributionData(SMLHelper.Assets.ModPrefab,System.Collections.Generic.IEnumerable{LootDistributionData.BiomeData},UWE.WorldEntityInfo)">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            </summary>
            <param name="prefab">The custom prefab which you want to spawn naturally in the game.</param>
            <param name="biomeDistribution">The <see cref="T:LootDistributionData.BiomeData"/> dictating how the prefab should spawn in the world.</param>
            <param name="info">The WorldEntityInfo of the prefab. For more information on how to set this up, see <see cref="T:SMLHelper.Handlers.WorldEntityDatabaseHandler"/>.</param>
        </member>
        <member name="M:SMLHelper.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,LootDistributionData.SrcData)">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.LootDistributionHandler.EditLootDistributionData(System.String,BiomeType,System.Single,System.Int32)">
            <summary>
            Edits Loot Distribution data for existing prefabs.
            </summary>
            <param name="classId">The ClassID of the prefab. If unsure, use CraftData.GetClassIdForTechType.</param>
            <param name="biome">The <see cref="T:BiomeType"/>to change the data for.</param>
            <param name="probability">The desired probability.</param>
            <param name="count">The number to spawn at a time when spawning happens.</param>
        </member>
        <member name="M:SMLHelper.Handlers.LootDistributionHandler.EditLootDistributionData(System.String,System.Collections.Generic.IEnumerable{LootDistributionData.BiomeData})">
            <summary>
            Edits Loot Distribution data for existing prefabs, for e.g. original game prefabs.
            </summary>
            <param name="classId">The ClassID of the prefab. If unsure, use CraftData.GetClassIdForTechType.</param>
            <param name="biomeDistribution">The list of <see cref="T:LootDistributionData.BiomeData"/> that contains information about how/when it should spawn in biomes.</param>
        </member>
        <member name="T:SMLHelper.Handlers.OptionsPanelHandler">
            <summary>
            A handler class for registering your custom in-game mod options.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.OptionsPanelHandler.RegisterModOptions(SMLHelper.Options.ModOptions)">
            <summary>
            Registers your mod options to the in-game menu.
            </summary>
            <param name="options">The mod options. Create a new child class inheriting from this one
            and add your options to it.</param>
            <seealso cref="T:SMLHelper.Options.ModOptions"/>
        </member>
        <member name="M:SMLHelper.Handlers.OptionsPanelHandler.RegisterModOptions``1">
            <summary>
            Generates an options menu based on the attributes and members declared in the <see cref="T:SMLHelper.Json.ConfigFile"/>
            and registers it to the in-game menu.
            </summary>
            <typeparam name="T">A class derived from <see cref="T:SMLHelper.Json.ConfigFile"/> to generate the options menu from.</typeparam>
            <returns>An instance of the <typeparamref name="T"/> : <see cref="T:SMLHelper.Json.ConfigFile"/> with values loaded
            from the config file on disk.</returns>
        </member>
        <member name="T:SMLHelper.Handlers.PDAHandler">
            <summary>
            A handler class for various scanner related data.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.PDAHandler.EditFragmentsToScan(TechType,System.Int32)">
            <summary>
            Edits how many fragments must be scanned before unlocking the techtype's blueprint.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="fragmentCount">The number of fragments to scan.</param>
        </member>
        <member name="M:SMLHelper.Handlers.PDAHandler.EditFragmentScanTime(TechType,System.Single)">
            <summary>
            Edits the time it takes to finish scanning a fragment.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="scanTime">The relative time spent on scanning. Default value is 1.</param>
        </member>
        <member name="M:SMLHelper.Handlers.PDAHandler.AddCustomScannerEntry(PDAScanner.EntryData)">
            <summary>
            Adds in a custom <see cref="T:PDAScanner.EntryData"/>. ***Cannot be used to Change the values of a techtype that has data already!***
            </summary>
            <param name="entryData">The <see cref="T:PDAScanner.EntryData"/> of the entry. Must be populated when passed in.</param>
        </member>
        <member name="M:SMLHelper.Handlers.PDAHandler.AddCustomScannerEntry(TechType,TechType,System.Boolean,System.String,System.Int32,System.Single,System.Boolean)">
            <summary>
            Adds in a custom <see cref="T:PDAScanner.EntryData"/>.
            </summary>
            <param name="key">The scanned object's <see cref="T:TechType"/>. In case of fragments, the fragment <see cref="T:TechType"/> is the key.</param>
            <param name="blueprint">The <paramref name="blueprint"/> when unlocked when scanned. In case of fragments, this is the actual <see cref="T:TechType"/> that unlocks when all fragments are scanned.</param>
            <param name="isFragment">Whether the <paramref name="key"/> is a fragment or not.</param>
            <param name="totalFragmentsRequired">The total amount of objects of <paramref name="key"/> that need to be scanned to unlock the <paramref name="blueprint"/> and <paramref name="encyclopediaKey"/>.</param>
            <param name="scanTime">The amount of time it takes to finish one scan. In seconds.</param>
            <param name="destroyAfterScan">Whether the object should be destroyed after the scan is finished.</param>
            <param name="encyclopediaKey">The key to the encyclopedia entry.</param>
        </member>
        <member name="M:SMLHelper.Handlers.PDAHandler.AddLogEntry(System.String,System.String,UnityEngine.Sprite,FMODAsset)">
            <summary>
            Adds a custom log entry.
            </summary>
            <param name="key">The key to refer to this entry.</param>
            <param name="languageKey">The subtitles language key for this entry.</param>
            <param name="icon">The icon that will be used in the Log tab for this entry. if <c>null</c> It will use the default log entry icon.</param>
            <param name="sound">The sound that will be played once this entry is triggered or played in the Log tab.<br/>
            If <c>null</c> the Play button in the Log tab will disappear and a sound wont play when this entry is triggered.</param>
        </member>
        <member name="M:SMLHelper.Handlers.PDAHandler.AddEncyclopediaEntry(PDAEncyclopedia.EntryData)">
            <summary>
            Adds custom entry.
            </summary>
            <param name="entry">The <see cref="T:PDAEncyclopedia.EntryData"/> entry.</param>
        </member>
        <member name="T:SMLHelper.Handlers.PingHandler">
            <summary>
            A handler related to PingTypes
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.PingHandler.RegisterNewPingType(System.String,Atlas.Sprite)">
            <summary>
            Registers a ping type for use when creating a beacon
            </summary>
            <param name="pingName">The name of the new ping type</param>
            <param name="sprite">The sprite that is associated with the ping</param>
            <returns>The newly registered PingType</returns>
        </member>
        <member name="M:SMLHelper.Handlers.PingHandler.RegisterNewPingType(System.String,UnityEngine.Sprite)">
            <summary>
            Registers a ping type for use when creating a beacon
            </summary>
            <param name="pingName">The name of the new ping type</param>
            <param name="sprite">The sprite that is associated with the ping</param>
            <returns>The newly registered PingType</returns>
        </member>
        <member name="M:SMLHelper.Handlers.PingHandler.TryGetModdedPingType(System.String,PingType@)">
            <summary>
            Safely looks for a modded ping type in the SMLHelper PingTypeCache and outputs its <see cref="T:PingType"/> value when found.
            </summary>
            <param name="pingTypeString">The string used to define the modded PingType</param>
            <param name="moddedPingType">The PingType enum value. Defaults to <see cref="F:PingType.None"/> when the PingType was not found.</param>
            <returns><c>True</c> if the PingType was found; Otherwise <c>false</c></returns>
        </member>
        <member name="T:SMLHelper.Handlers.PrefabHandler">
            <summary>
            A handler for registering Unity prefabs associated to a <see cref="T:TechType"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.PrefabHandler.RegisterPrefab(SMLHelper.Assets.ModPrefab)">
            <summary>
            Registers a ModPrefab into the game.
            </summary>
            <param name="prefab">The mod prefab to register. Create a child class inheriting off this one and configure as needed.</param>
            <seealso cref="T:SMLHelper.Assets.ModPrefab"/>
        </member>
        <member name="T:SMLHelper.Handlers.SaveDataHandler">
            <summary>
            A handler class for registering your <see cref="T:SMLHelper.Json.SaveDataCache"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.SaveDataHandler.RegisterSaveDataCache``1">
            <summary>
            Registers your <see cref="T:SMLHelper.Json.SaveDataCache"/> to be automatically loaded and saved whenever the game is.
            </summary>
            <typeparam name="T">A class derived from <see cref="T:SMLHelper.Json.SaveDataCache"/> to hold your save data.</typeparam>
            <returns>An instance of the <typeparamref name="T"/> : <see cref="T:SMLHelper.Json.SaveDataCache"/> with values loaded
            from the json file on disk whenever a save slot is loaded.</returns>
        </member>
        <member name="T:SMLHelper.Handlers.SpriteHandler">
            <summary>
            A handler class for adding custom sprites into the game.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <seealso cref="M:SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <seealso cref="M:SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:SMLHelper.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="T:SMLHelper.Handlers.SurvivalHandler">
            <summary>
            a common handler for uses specified to the Survival component
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.SurvivalHandler.GiveOxygenOnConsume(TechType,System.Single,System.Boolean)">
            <summary>
            <para>makes the item gives oxygen on use.</para>
            </summary>
            <param name="techType">the TechType that you want to make it give oxygen on use</param>
            <param name="oxygenGiven">the oxygen amount the item gives</param>
            <param name="isEdible">set it to <see langword="true" /> if the item is edible and has the <see cref="T:Eatable"/> component attached to it. 
            <para>defaults to <see langword="false" /></para>
            </param>
        </member>
        <member name="M:SMLHelper.Handlers.SurvivalHandler.GiveHealthOnConsume(TechType,System.Single,System.Boolean)">
            <summary>
            <para>makes the item Heal the player on consume.</para>
            </summary>
            <param name="techType">the TechType that you want it to heal back</param>
            <param name="healthBack">amount to heal the player</param>
            <param name="isEdible">set it to <see langword="true" /> if the item is edible and has the <see cref="T:Eatable"/> component attached to it. 
            <para>defaults to <see langword="false" /></para>
            </param>
        </member>
        <member name="T:SMLHelper.Handlers.TechCategoryHandler">
            <summary>
            A handler class for everything related to creating new TechCategories.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.TechCategoryHandler.AddTechCategory(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:TechCategory" /> into the game.
            </summary>
            <param name="techCatagoryName">The name of the TechCategory. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechCategory. Can be anything.</param>
            <returns>
            The new <see cref="T:TechCategory" /> that is created.
            </returns>
        </member>
        <member name="M:SMLHelper.Handlers.TechCategoryHandler.ModdedTechCategoryExists(System.String)">
            <summary>
            Safely looks for a modded category from another mod in the SMLHelper TechCategoryCache.
            </summary>
            <param name="techCategoryString">The string used to define the techcategory.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Handlers.TechCategoryHandler.TryGetModdedTechCategory(System.String,TechCategory@)">
            <summary>
            Safely looks for a modded category from another mod in the SMLHelper TechCategoryCache and outputs its <see cref="T:TechCategory" /> value when found.
            </summary>
            <param name="techCategoryString">The string used to define the techcategory.</param>
            <param name="modTechCategory">The TechCategory enum value of the modded. Defaults to <see cref="F:TechCategory.Misc" /> when the item was not found.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Handlers.TechCategoryHandler.TryRegisterTechCategoryToTechGroup(TechGroup,TechCategory)">
            <summary>
            Registers the TechCategory to a TechGroup in CraftData.groups.
            </summary>
            <param name="techGroup">The tech group.</param>
            <param name="techCategory">The tech category.</param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Handlers.TechGroupHandler">
            <summary>
            A handler class for everything related to creating new TechGroups.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.TechGroupHandler.AddTechGroup(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:TechGroup" /> into the game.
            </summary>
            <param name="techGroupName">The name of the TechGroup. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechGroup. Can be anything.</param>
            <returns>
            The new <see cref="T:TechGroup" /> that is created.
            </returns>
        </member>
        <member name="M:SMLHelper.Handlers.TechGroupHandler.ModdedTechGroupExists(System.String)">
            <summary>
            Safely looks for a modded group from another mod in the SMLHelper TechGroupCache.
            </summary>
            <param name="techGroupString">The string used to define the techgroup.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Handlers.TechGroupHandler.TryGetModdedTechGroup(System.String,TechGroup@)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechGroupCache and outputs its <see cref="T:TechGroup" /> value when found.
            </summary>
            <param name="techGroupString">The string used to define the techgroup.</param>
            <param name="modTechGroup">The TechGroup enum value of the modded. Defaults to <see cref="F:TechGroup.Uncategorized" /> when the item was not found.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:SMLHelper.Handlers.TechTypeHandler">
            <summary>
            A handler class for everything related to creating new TechTypes.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <see langword="true"/>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String,Atlas.Sprite,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String,UnityEngine.Sprite,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:SMLHelper.Handlers.TechTypeHandler.TryGetModdedTechType(System.String,TechType@)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechTypeCache and outputs its <see cref="T:TechType" /> value when found.
            </summary>
            <param name="techtypeString">The string used to define the modded item's new techtype.</param>
            <param name="modTechType">The TechType enum value of the modded. Defaults to <see cref="F:TechType.None" /> when the item was not found.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:SMLHelper.Handlers.TechTypeHandler.ModdedTechTypeExists(System.String)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechTypeCache.
            </summary>
            <param name="techtypeString">The string used to define the modded item's new techtype.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="T:SMLHelper.Handlers.WorldEntityDatabaseHandler">
            <summary>
            A handler for the WorldEntityDatabase of the game.
            </summary>
        </member>
        <member name="M:SMLHelper.Handlers.WorldEntityDatabaseHandler.AddCustomInfo(System.String,TechType,UnityEngine.Vector3,System.Boolean,LargeWorldEntity.CellLevel,EntitySlot.Type)">
            <summary>
            Adds in a custom <see cref="T:UWE.WorldEntityInfo"/> to the <see cref="T:UWE.WorldEntityDatabase"/> of the game.
            It contains information about the entity, like its <see cref="T:LargeWorldEntity.CellLevel"/>, its <see cref="T:EntitySlotData.EntitySlotType"/>, etc.
            </summary>
            <param name="classId">The classId of the entity.</param>
            <param name="techType">The <see cref="T:TechType"/> of the entity.</param>
            <param name="prefabZUp">Whether the prefab's Z-axis should be facing up, when spawned.</param>
            <param name="cellLevel">The <see cref="T:LargeWorldEntity.CellLevel"/> of the entity.</param>
            <param name="slotType">The <see cref="T:EntitySlot.Type"/> of the entity. Dictates which "slots" are suitable for this entity to spawn in. For e.g., most in-crate fragments have a <see cref="F:EntitySlot.Type.Small"/> slot type.</param>
            <param name="localScale">The scale that the entity's local scale is set to when spawned.</param>
        </member>
        <member name="M:SMLHelper.Handlers.WorldEntityDatabaseHandler.AddCustomInfo(System.String,UWE.WorldEntityInfo)">
            <summary>
            Adds in a custom <see cref="T:UWE.WorldEntityInfo"/> to the <see cref="T:UWE.WorldEntityDatabase"/> of the game.
            It contains information about the entity, like its <see cref="T:LargeWorldEntity.CellLevel"/>, its <see cref="T:EntitySlot.Type"/>, etc.
            </summary>
            <param name="classId">The classID of the entity whose data you are adding in.</param>
            <param name="data">The <see cref="T:UWE.WorldEntityInfo"/> data. Data is stored in the fields of the class, so they must be populated when passed in.</param>
        </member>
        <member name="T:SMLHelper.Initializer">
            <summary>
            WARNING: This class is for use only by Bepinex.
            </summary>
        </member>
        <member name="M:SMLHelper.Initializer.#ctor">
            <summary>
            WARNING: This method is for use only by Bepinex.
            </summary>
        </member>
        <member name="T:SMLHelper.Json.Attributes.FileNameAttribute">
            <summary>
            Attribute used to specify a file name for use with a <see cref="T:SMLHelper.Json.JsonFile"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.Attributes.FileNameAttribute.FileName">
            <summary>
            The filename.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Attributes.FileNameAttribute.#ctor(System.String)">
            <summary>
            Used to specify the file name for a <see cref="T:SMLHelper.Json.JsonFile"/>.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:SMLHelper.Json.ConfigFile">
            <summary>
            A simple implementation of <see cref="T:SMLHelper.Json.Interfaces.IJsonFile"/> for use with config files.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.ConfigFile.JsonFilePath">
            <summary>
            The file path at which the JSON file is accessible for reading and writing.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.ConfigFile.AlwaysIncludedJsonConverters">
            <summary>
            The <see cref="T:Newtonsoft.Json.JsonConverter"/>s that should always be used when reading/writing JSON data.
            </summary>
            <seealso cref="F:SMLHelper.Json.ConfigFile.alwaysIncludedJsonConverters"/>
        </member>
        <member name="M:SMLHelper.Json.ConfigFile.#ctor">
            <summary>
            Creates a new instance of <see cref="T:SMLHelper.Json.ConfigFile"/>, parsing the filename and subfolder from a
            <see cref="T:SMLHelper.Json.ConfigFileAttribute"/> if declared, or with default values otherwise.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.ConfigFile.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
            <param name="fileName">The name of the <see cref="T:SMLHelper.Json.ConfigFile"/>, "config" by default.</param>
            <param name="subfolder">Optional subfolder for the <see cref="T:SMLHelper.Json.ConfigFile"/>.</param>
            <example>
            <code>
            using SMLHelper.Options;
            using UnityEngine;
            
            public class MyConfig : ConfigFile
            {
                public KeyCode ActivationKey { get; set; } = KeyCode.Escape;
                public MyConfig() : base("options", "Config Files") { }
                // The config file will be stored at the path "QMods\YourModName\Config Files\options.json"
            }
            </code>
            </example>
        </member>
        <member name="F:SMLHelper.Json.ConfigFile.OnStartedLoading">
            <summary>
            An event that is invoked whenever the <see cref="T:SMLHelper.Json.ConfigFile"/> is about to load data from disk.
            </summary>
        </member>
        <member name="F:SMLHelper.Json.ConfigFile.OnFinishedLoading">
            <summary>
            An event that is invoked whenever the <see cref="T:SMLHelper.Json.ConfigFile"/> has finished loading data from disk.
            </summary>
        </member>
        <member name="F:SMLHelper.Json.ConfigFile.OnStartedSaving">
            <summary>
            An event that is invoked whenever the <see cref="T:SMLHelper.Json.ConfigFile"/> is about to save data to disk.
            </summary>
        </member>
        <member name="F:SMLHelper.Json.ConfigFile.OnFinishedSaving">
            <summary>
            An event that is invoked whenever the <see cref="T:SMLHelper.Json.ConfigFile"/> has finished saving data to disk.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.ConfigFile.Load(System.Boolean)">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <seealso cref="M:SMLHelper.Json.ConfigFile.Save"/>
            <seealso cref="M:SMLHelper.Json.ConfigFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Json.ConfigFile.Save">
            <summary>
            Saves the current fields and properties of the <see cref="T:SMLHelper.Json.ConfigFile"/> as JSON properties to the file on disk.
            </summary>
            <seealso cref="M:SMLHelper.Json.ConfigFile.Load(System.Boolean)"/>
            <seealso cref="M:SMLHelper.Json.ConfigFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Json.ConfigFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.
            The <see cref="P:SMLHelper.Json.ConfigFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:SMLHelper.Json.ConfigFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Json.ConfigFile.Load(System.Boolean)"/>
        </member>
        <member name="M:SMLHelper.Json.ConfigFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the current fields and properties of the <see cref="T:SMLHelper.Json.ConfigFile"/> as JSON properties to the file on disk.
            </summary>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.
            The <see cref="P:SMLHelper.Json.ConfigFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:SMLHelper.Json.ConfigFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Json.ConfigFile.Save"/>
        </member>
        <member name="T:SMLHelper.Json.ConfigFileAttribute">
            <summary>
            Attribute used to specify the filename and subfolder for a <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
            <remarks>
            When used alongside the <see cref="M:SMLHelper.Json.ConfigFile.#ctor(System.String,System.String)"/> constructor, this attribute is ignored.
            </remarks>
            <example>
            <code>
            using SMLHelper.Json;
            
            [ConfigFile("options", "configs")]
            public class Config : ConfigFile
            {
                public float MyFloatValue;
            }
            </code>
            </example>
        </member>
        <member name="P:SMLHelper.Json.ConfigFileAttribute.Filename">
            <summary>
            The filename to use for the <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.ConfigFileAttribute.Subfolder">
            <summary>
            The subfolder within the mod's folder for the <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.ConfigFileAttribute.#ctor(System.String)">
            <summary>
            Used to specify the filename for the <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
            <remarks>
            When used alongside the <see cref="M:SMLHelper.Json.ConfigFile.#ctor(System.String,System.String)"/> constructor, this attribute is ignored.
            </remarks>
            <param name="filename">The filename to use for the <see cref="T:SMLHelper.Json.ConfigFile"/>.</param>
        </member>
        <member name="T:SMLHelper.Json.ConfigFileEventArgs">
            <summary>
            Contains basic information for a <see cref="T:SMLHelper.Json.ConfigFile"/> event.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.ConfigFileEventArgs.Instance">
            <summary>
            The instance of the <see cref="T:SMLHelper.Json.ConfigFile"/> this event pertains to.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.ConfigFileEventArgs.#ctor(SMLHelper.Json.ConfigFile)">
            <summary>
            Instantiates a new <see cref="T:SMLHelper.Json.ConfigFileEventArgs"/>.
            </summary>
            <param name="instance">The <see cref="T:SMLHelper.Json.ConfigFile"/> instance the event pertains to.</param>
        </member>
        <member name="T:SMLHelper.Json.Converters.FloatConverter">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonConverter"/> for rounding floats or doubles to a given number of decimal places,
            trimming trailing 0s.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.FloatConverter.#ctor(System.Int32,System.MidpointRounding)">
            <summary>
            Creates a new <see cref="T:SMLHelper.Json.Converters.FloatConverter"/>.
            </summary>
            <param name="decimalPlaces">The number of decimal places to round to, where -1 disables rounding.</param>
            <param name="mode">The rounding mode to use when rounding.</param>
            <seealso cref="T:System.MidpointRounding"/>
        </member>
        <member name="M:SMLHelper.Json.Converters.FloatConverter.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SMLHelper.Json.Converters.FloatConverter"/>.
            </summary>
            <param name="decimalPlaces">The number of decimal places to round to, where -1 disables rounding.</param>
        </member>
        <member name="M:SMLHelper.Json.Converters.FloatConverter.#ctor(System.MidpointRounding)">
            <summary>
            Creates a new <see cref="T:SMLHelper.Json.Converters.FloatConverter"/>.
            </summary>
            <param name="mode">The rounding mode to use when rounding.</param>
        </member>
        <member name="M:SMLHelper.Json.Converters.FloatConverter.#ctor">
            <summary>
            Creates a new <see cref="T:SMLHelper.Json.Converters.FloatConverter"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.FloatConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            The method for writing the <paramref name="value"/> data to the <paramref name="writer"/>.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SMLHelper.Json.Converters.FloatConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            The method for reading the <see cref="T:System.Single"/> or <see cref="T:System.Double"/> data from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Json.Converters.FloatConverter.CanConvert(System.Type)">
            <summary>
            The method for determining whether the current <paramref name="objectType"/> can be processed byt this
            <see cref="T:Newtonsoft.Json.JsonConverter"/>
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Json.Converters.KeyCodeConverter">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonConverter"/> for handling <see cref="T:UnityEngine.KeyCode"/>s.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.KeyCodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            The method for writing the <paramref name="value"/> data to the <paramref name="writer"/>.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SMLHelper.Json.Converters.KeyCodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            The method for reading the <see cref="T:UnityEngine.KeyCode"/> data from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Json.Converters.KeyCodeConverter.CanConvert(System.Type)">
            <summary>
            The method for determining whether the current <paramref name="objectType"/> can be processed by this
            <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Json.Converters.QuaternionConverter">
            <summary>
            A Quaternion json converter that simplifies the Vector3 to only x,y,z serialization.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.QuaternionConverter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Json.Converters.QuaternionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SMLHelper.Json.Converters.QuaternionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Json.Converters.Vector2Converter">
            <summary>
            A Vector2 json converter that simplifies the Vector2 to only x,y serialization.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector2Converter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector2Converter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector2Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Json.Converters.Vector2IntConverter">
            <summary>
            A Vector2Int json converter that simplifies the Vector2Int to only x,y serialization.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector2IntConverter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector2IntConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector2IntConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Json.Converters.Vector3Converter">
            <summary>
            A Vector3 json converter that simplifies the Vector3 to only x,y,z serialization.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector3Converter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector3Converter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector3Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Json.Converters.Vector3IntConverter">
            <summary>
            A Vector3Int json converter that simplifies the Vector3Int to only x,y,z serialization.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector3IntConverter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector3IntConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector3IntConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Json.Converters.Vector4Converter">
            <summary>
            A Vector4 json converter that simplifies the Vector4 to only x,y,z,w serialization.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector4Converter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector4Converter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SMLHelper.Json.Converters.Vector4Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Json.ExtensionMethods.JsonExtensions">
            <summary>
            Extension methods for parsing objects as JSON data.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.ExtensionMethods.JsonExtensions.LoadJson``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads the JSON properties from a file on disk into the <paramref name="jsonObject"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="jsonObject"/>.</typeparam>
            <param name="jsonObject">The object instance to load the properties into.</param>
            <param name="path">The file path to the JSON file to parse.</param>
            <param name="createIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">The <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.</param>
            <seealso cref="M:SMLHelper.Json.ExtensionMethods.JsonExtensions.SaveJson``1(``0,System.String,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Json.ExtensionMethods.JsonExtensions.SaveJson``1(``0,System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the fields and properties of the <paramref name="jsonObject"/> as JSON properties to the file on disk.
            </summary>
            <typeparam name="T">The type of the <paramref name="jsonObject"/>.</typeparam>
            <param name="jsonObject">The object instance to save the fields and properties from.</param>
            <param name="path">The file path at which to save the JSON file.</param>
            <param name="jsonConverters">The <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.</param>
        </member>
        <member name="T:SMLHelper.Json.Interfaces.IJsonFile">
            <summary>
            A simple interface for a JSON file framework.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.Interfaces.IJsonFile.JsonFilePath">
            <summary>
            The file path at which the JSON file is accessible for reading and writing.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.Interfaces.IJsonFile.AlwaysIncludedJsonConverters">
            <summary>
            The <see cref="T:Newtonsoft.Json.JsonConverter"/>s that should always be used when reading/writing JSON data.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.Interfaces.IJsonFile.Load(System.Boolean)">
            <summary>
            A method for loading the JSON properties from disk.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <seealso cref="M:SMLHelper.Json.Interfaces.IJsonFile.Save"/>
            <seealso cref="M:SMLHelper.Json.Interfaces.IJsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Json.Interfaces.IJsonFile.Save">
            <summary>
            A method for saving the JSON properties to disk.
            </summary>
            <seealso cref="M:SMLHelper.Json.Interfaces.IJsonFile.Load(System.Boolean)"/>
            <seealso cref="M:SMLHelper.Json.Interfaces.IJsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Json.Interfaces.IJsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            A method for loading the JSON properties from disk.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for
            deserialization.</param>
            <seealso cref="M:SMLHelper.Json.Interfaces.IJsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Json.Interfaces.IJsonFile.Load(System.Boolean)"/>
        </member>
        <member name="M:SMLHelper.Json.Interfaces.IJsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            A method for saving the JSON properties to disk.
            </summary>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.</param>
            <seealso cref="M:SMLHelper.Json.Interfaces.IJsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Json.Interfaces.IJsonFile.Save"/>
        </member>
        <member name="T:SMLHelper.Json.JsonFile">
            <summary>
            A simple abstract implementation of <see cref="T:SMLHelper.Json.Interfaces.IJsonFile"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.JsonFile.JsonFilePath">
            <summary>
            The file path at which the JSON file is accessible for reading and writing.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.JsonFile.AlwaysIncludedJsonConverters">
            <summary>
            The <see cref="T:Newtonsoft.Json.JsonConverter"/>s that should always be used when reading/writing JSON data.
            </summary>
            <seealso cref="F:SMLHelper.Json.JsonFile.alwaysIncludedJsonConverters"/>
        </member>
        <member name="F:SMLHelper.Json.JsonFile.OnStartedLoading">
            <summary>
            An event that is invoked whenever the <see cref="T:SMLHelper.Json.JsonFile"/> is about to load data from disk.
            </summary>
        </member>
        <member name="F:SMLHelper.Json.JsonFile.OnFinishedLoading">
            <summary>
            An event that is invoked whenever the <see cref="T:SMLHelper.Json.JsonFile"/> has finished loading data from disk.
            </summary>
        </member>
        <member name="F:SMLHelper.Json.JsonFile.OnStartedSaving">
            <summary>
            An event that is invoked whenever the <see cref="T:SMLHelper.Json.JsonFile"/> is about to save data to disk.
            </summary>
        </member>
        <member name="F:SMLHelper.Json.JsonFile.OnFinishedSaving">
            <summary>
            An event that is invoked whenever the <see cref="T:SMLHelper.Json.JsonFile"/> has finished saving data to disk.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.JsonFile.Load(System.Boolean)">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:SMLHelper.Json.JsonFile"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <seealso cref="M:SMLHelper.Json.JsonFile.Save"/>
            <seealso cref="M:SMLHelper.Json.JsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Json.JsonFile.Save">
            <summary>
            Saves the current fields and properties of the <see cref="T:SMLHelper.Json.JsonFile"/> as JSON properties to the file on disk.
            </summary>
            <seealso cref="M:SMLHelper.Json.JsonFile.Load(System.Boolean)"/>
            <seealso cref="M:SMLHelper.Json.JsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Json.JsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:SMLHelper.Json.JsonFile"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.
            The <see cref="P:SMLHelper.Json.JsonFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:SMLHelper.Json.JsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Json.JsonFile.Load(System.Boolean)"/>
        </member>
        <member name="M:SMLHelper.Json.JsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the current fields and properties of the <see cref="T:SMLHelper.Json.JsonFile"/> as JSON properties to the file on disk.
            </summary>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.
            The <see cref="P:SMLHelper.Json.JsonFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:SMLHelper.Json.JsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Json.JsonFile.Save"/>
        </member>
        <member name="T:SMLHelper.Json.JsonFileEventArgs">
            <summary>
            Contains basic information for a <see cref="T:SMLHelper.Json.JsonFile"/> event.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.JsonFileEventArgs.Instance">
            <summary>
            The instance of the <see cref="T:SMLHelper.Json.JsonFile"/> this event pertains to.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.JsonFileEventArgs.#ctor(SMLHelper.Json.JsonFile)">
            <summary>
            Instantiates a new <see cref="T:SMLHelper.Json.JsonFileEventArgs"/>.
            </summary>
            <param name="instance">The <see cref="T:SMLHelper.Json.JsonFile"/> instance the event pertains to.</param>
        </member>
        <member name="T:SMLHelper.Json.SaveDataCache">
            <summary>
            An abstract implementation of <see cref="T:SMLHelper.Json.Interfaces.IJsonFile"/> intended for use with caching per-save data.
            </summary>
        </member>
        <member name="P:SMLHelper.Json.SaveDataCache.JsonFilePath">
            <summary>
            The file path at which the JSON file is accessible for reading and writing.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.SaveDataCache.#ctor">
            <summary>
            Creates a new instance of <see cref="T:SMLHelper.Json.SaveDataCache"/>, parsing the file name from <see cref="T:SMLHelper.Json.Attributes.FileNameAttribute"/>
            if declared, or with default values otherwise.
            </summary>
        </member>
        <member name="M:SMLHelper.Json.SaveDataCache.Load(System.Boolean)">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:SMLHelper.Json.SaveDataCache"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <seealso cref="M:SMLHelper.Json.SaveDataCache.Save"/>
            <seealso cref="M:SMLHelper.Json.SaveDataCache.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the player is not in-game.</exception>
        </member>
        <member name="M:SMLHelper.Json.SaveDataCache.Save">
            <summary>
            Saves the current fields and properties of the <see cref="T:SMLHelper.Json.SaveDataCache"/> as JSON properties to the file on disk.
            </summary>
            <seealso cref="M:SMLHelper.Json.SaveDataCache.Load(System.Boolean)"/>
            <seealso cref="M:SMLHelper.Json.SaveDataCache.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the player is not in-game.</exception>
        </member>
        <member name="M:SMLHelper.Json.SaveDataCache.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:SMLHelper.Json.SaveDataCache"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.
            The <see cref="P:SMLHelper.Json.JsonFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:SMLHelper.Json.SaveDataCache.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Json.SaveDataCache.Load(System.Boolean)"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the player is not in-game.</exception>
        </member>
        <member name="M:SMLHelper.Json.SaveDataCache.SaveWithConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the current fields and properties of the <see cref="T:SMLHelper.Json.SaveDataCache"/> as JSON properties to the file on disk.
            </summary>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.
            The <see cref="P:SMLHelper.Json.JsonFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:SMLHelper.Json.SaveDataCache.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Json.SaveDataCache.Save"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the player is not in-game.</exception>
        </member>
        <member name="T:SMLHelper.MonoBehaviours.Fixer">
            <summary> This component is obsolete </summary>
        </member>
        <member name="T:SMLHelper.Options.Attributes.ButtonAttribute">
            <summary>
            Attribute used to signify the decorated method should be represented in the mod's options menu
            as a <see cref="T:SMLHelper.Options.ModButtonOption"/>.
            When the button is clicked, the given method will run.
            </summary>
            <example>
            <code>
            using SMLHelper.Json;
            using SMLHelper.Options;
            using QModManager.Utility;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Button("My Cool Button")]
                public static void MyCoolButton(object sender, ButtonClickedEventArgs e)
                {
                    Logger.Log(Logger.Level.Info, "Button was clicked!");
                    Logger.Log(Logger.Level.Info, e.Id.ToString());
                }
            }
            </code>
            </example>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:SMLHelper.Options.ButtonClickedEventArgs"/>
            <seealso cref="T:SMLHelper.Utility.InternalLogger"/>
            <seealso cref="T:SMLHelper.Json.ConfigFile"/>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ButtonAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated method should be represented in the mod's options menu as a <see cref="T:SMLHelper.Options.ModButtonOption"/>
            and sets its label.
            </summary>
            <param name="label">The label for the button. If none is set, the name of the method will be used.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ButtonAttribute.#ctor">
            <summary>
            Signifies the decorated method should be represented in the mod's options menu as a <see cref="T:SMLHelper.Options.ModButtonOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.Attributes.ChoiceAttribute">
            <summary>
            Attribute used to signify the decorated member should be represented in the mod's options menu as a
            <see cref="T:SMLHelper.Options.ModChoiceOption"/>. Works for either <see cref="T:System.Int32"/> index-based, <see cref="T:System.String"/>-based, or
            <see cref="T:System.Enum"/>-based members.
            </summary>
            <remarks>
            <see cref="T:System.Enum"/> choices can also be parsed from their values by merely omitting the <see cref="T:SMLHelper.Options.Attributes.ChoiceAttribute"/>.
            </remarks>
            <example>
            <code>
            using SMLHelper.Json;
            using SMLHelper.Options;
            
            public enum CustomChoice { One, Two, Three }
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Choice("My index-based choice", "One", "Two", "Three")]
                public int MyIndexBasedChoice;
                
                [Choice]
                public CustomChoice MyEnumBasedChoice;
            }
            </code>
            </example>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:SMLHelper.Options.ModChoiceOption"/>
            <seealso cref="T:SMLHelper.Json.ConfigFile"/>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ChoiceAttribute.Options">
            <summary>
            The list of options that will be displayed.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ChoiceAttribute.#ctor(System.String,System.String[])">
            <summary>
            Attribute used to signify the decorated member should be represented in the mod's options menu as a
            <see cref="T:SMLHelper.Options.ModChoiceOption"/>. Works for either <see cref="T:System.Int32"/> index-based, <see cref="T:System.String"/>-based, or
            <see cref="T:System.Enum"/>-based members.
            </summary>
            <remarks>
            <see cref="T:System.Enum"/> choices can also be parsed from their values by merely omitting the <paramref name="options"/>.
            </remarks>
            <param name="label">The label for the choice. If none is set, the name of the member will be used.</param>
            <param name="options">The list of options for the user to choose from.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ChoiceAttribute.#ctor(System.String[])">
            <summary>
            Attribute used to signify the decorated member should be represented in the mod's options menu as a
            <see cref="T:SMLHelper.Options.ModChoiceOption"/>. Works for either <see cref="T:System.Int32"/> index-based, <see cref="T:System.String"/>-based, or
            <see cref="T:System.Enum"/>-based members.
            </summary>
            <remarks>
            <see cref="T:System.Enum"/> choices can also be parsed from their values by merely omitting the <paramref name="options"/>.
            </remarks>
            <param name="options">The list of options for the user to choose from.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ChoiceAttribute.#ctor">
            <summary>
            Attribute used to signify the decorated member should be represented in the mod's options menu as a
            <see cref="T:SMLHelper.Options.ModChoiceOption"/>. Works for either <see cref="T:System.Int32"/> index-based, <see cref="T:System.String"/>-based, or
            <see cref="T:System.Enum"/>-based members.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.MenuAttribute">
            <summary>
            The <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.MenuAttribute"/> relating to this <see cref="T:SMLHelper.Options.ModOptions"/> menu.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.ModOptionAttributesMetadata">
            <summary>
            A dictionary of <see cref="T:SMLHelper.Options.Attributes.ModOptionAttributeMetadata`1"/>, indexed by <see cref="P:SMLHelper.Options.OptionItem.Id"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.ProcessMetadata">
            <summary>
            Process metadata for members of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.memberIsDeclaredInConfigFileSubclass(System.Reflection.MemberInfo)">
            <summary>
            Checks whether a given <see cref="T:System.Reflection.MemberInfo"/> is declared in any subclass of <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> to check.</param>
            <returns>Whether the given <see cref="T:System.Reflection.MemberInfo"/> is declared in any subclass of <see cref="T:SMLHelper.Json.ConfigFile"/>.</returns>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.memberIsNotIgnored(System.Reflection.MemberInfo)">
            <summary>
            Checks whether a given <see cref="T:System.Reflection.MemberInfo"/> should be ignored when generating the options menu, based on whether
            the member has a declared <see cref="T:SMLHelper.Options.Attributes.IgnoreMemberAttribute"/>, or the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.MenuAttribute"/>'s
            <see cref="P:SMLHelper.Options.Attributes.MenuAttribute.MemberProcessing"/> property.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> to check.</param>
            <returns>Whether the given <see cref="T:System.Reflection.MemberInfo"/> member should be ignored when generating the options menu.</returns>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.processFieldOrProperty(System.Reflection.MemberInfo,SMLHelper.Options.Attributes.MemberType,System.Type)">
            <summary>
            Processes the given field or property and hands off to
            <see cref="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.addModOptionMetadata``1(System.Reflection.MemberInfo,SMLHelper.Options.Attributes.MemberType,System.Type)"/> to generate a <see cref="T:SMLHelper.Options.Attributes.ModOptionAttributeMetadata`1"/>
            and add it to the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.ModOptionAttributesMetadata"/> dictionary.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> of the member.</param>
            <param name="memberType">The <see cref="T:SMLHelper.Options.Attributes.MemberType"/> of the member.</param>
            <param name="underlyingType">The underlying <see cref="T:System.Type"/> of the member.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.processMethod(System.Reflection.MethodInfo)">
            <summary>
            Processes the given method and hands off to <see cref="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.addModOptionMetadata``1(System.Reflection.MemberInfo,SMLHelper.Options.Attributes.MemberType,System.Type)"/>
            to generate a <see cref="T:SMLHelper.Options.Attributes.ModOptionAttributeMetadata`1"/> and add it to the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.ModOptionAttributesMetadata"/> dictionary.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> of the method.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.addModOptionMetadata``1(System.Reflection.MemberInfo,SMLHelper.Options.Attributes.MemberType,System.Type)">
            <summary>
            Generates a <see cref="T:SMLHelper.Options.Attributes.ModOptionAttributeMetadata`1"/> based on the member and its attributes, then adds it to the
            <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.ModOptionAttributesMetadata"/> dictionary.
            </summary>
            <typeparam name="TAttribute">The type of the <see cref="T:SMLHelper.Options.ModOption"/> to generate for this member.</typeparam>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> of the member.</param>
            <param name="memberType">The <see cref="T:SMLHelper.Options.Attributes.MemberType"/> of the member.</param>
            <param name="underlyingType">The underlying <see cref="T:System.Type"/> of the member.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.GetEventMetadata``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the metadata of every <typeparamref name="TAttribute"/> defined for a member.
            </summary>
            <typeparam name="TAttribute">
            The type of <see cref="T:SMLHelper.Options.Attributes.ModOptionEventAttribute"/> attribute defined on the member to gather metadata for.
            </typeparam>
            <param name="memberInfo">The member to gather attribute metadata for.</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.HandleButtonClick(System.Object,SMLHelper.Options.ButtonClickedEventArgs)">
            <summary>
            Invokes the method for a given <see cref="T:SMLHelper.Options.Attributes.ButtonAttribute"/> and passes parameters when the button is clicked.
            </summary>
            <param name="sender">The sender of the original button click event.</param>
            <param name="e">The <see cref="T:SMLHelper.Options.ButtonClickedEventArgs"/> for the click event.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.HandleChoiceChanged(System.Object,SMLHelper.Options.ChoiceChangedEventArgs)">
            <summary>
            Sets the value in the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(SMLHelper.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:SMLHelper.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original choice changed event.</param>
            <param name="e">The <see cref="T:SMLHelper.Options.ChoiceChangedEventArgs"/> for the choice changed event.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.HandleKeybindChanged(System.Object,SMLHelper.Options.KeybindChangedEventArgs)">
            <summary>
            Sets the value in the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(SMLHelper.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:SMLHelper.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original keybind changed event.</param>
            <param name="e">The <see cref="T:SMLHelper.Options.KeybindChangedEventArgs"/> for the keybind changed event.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.HandleSliderChanged(System.Object,SMLHelper.Options.SliderChangedEventArgs)">
            <summary>
            Sets the value in the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(SMLHelper.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:SMLHelper.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original slider changed event.</param>
            <param name="e">The <see cref="T:SMLHelper.Options.SliderChangedEventArgs"/> for the slider changed event.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.HandleToggleChanged(System.Object,SMLHelper.Options.ToggleChangedEventArgs)">
            <summary>
            Sets the value in the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:SMLHelper.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(SMLHelper.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:SMLHelper.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original toggle changed event.</param>
            <param name="e">The <see cref="T:SMLHelper.Options.ToggleChangedEventArgs"/> for the toggle changed event.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.HandleGameObjectCreated(System.Object,SMLHelper.Options.GameObjectCreatedEventArgs)">
            <summary>
            Generates tooltips as required for each <see cref="T:SMLHelper.Options.ModOption"/>, before
            invoking any relevant method(s) specified with <see cref="T:SMLHelper.Options.Attributes.OnGameObjectCreatedAttribute"/>(s) and passes
            parameters when a <see cref="T:UnityEngine.GameObject"/> is created in the options menu.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents(SMLHelper.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object)">
            <summary>
            Invokes the relevant method(s) specified with the <see cref="T:SMLHelper.Options.Attributes.OnChangeAttribute"/>(s)
            and passes parameters when a value is changed when loaded from disk.
            </summary>
            <param name="modOptionMetadata">The metadata for the mod option.</param>
            <param name="sender">The sender of the event.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(SMLHelper.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)">
            <summary>
            Invokes the relevant method(s) specified with <see cref="T:SMLHelper.Options.Attributes.OnChangeAttribute"/>(s)
            and passes parameters when a value is changed.
            </summary>
            <typeparam name="TSource">The type of the event args.</typeparam>
            <param name="modOptionMetadata">The metadata for the mod option.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event args from the OnChange event.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ConfigFileMetadata`1.InvokeEvent``1(SMLHelper.Options.Attributes.MemberInfoMetadata{`0},System.Object,``0)">
            <summary>
            Invoke the relevant method specified by a <see cref="T:SMLHelper.Options.Attributes.ModOptionEventAttribute"/>
            and passes relevant parameters.
            </summary>
            <typeparam name="TSource">The type of the event args.</typeparam>
            <param name="memberInfoMetadata">The metadata for the method.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event args from the event.</param>
        </member>
        <member name="T:SMLHelper.Options.Attributes.IgnoreMemberAttribute">
            <summary>
            Attribute used to signify the given property, field or method should be ignored when generating your mod options menu.
            </summary>
            <remarks>
            By default, all members are ignored unless either they are decorated with a <see cref="T:SMLHelper.Options.Attributes.ModOptionAttribute"/> derivative,
            or the <see cref="P:SMLHelper.Options.Attributes.MenuAttribute.MemberProcessing"/> property is set to <see cref="F:SMLHelper.Options.Attributes.MenuAttribute.Members.Implicit"/>.
            </remarks>
            <example>
            <code>
            using SMLHelper.Json;
            using SMLHelper.Options;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Button("My Cool Button)]
                public static void MyCoolButton(object sender, ButtonClickedEventArgs e)
                {
                    Logger.Log(Logger.Level.Info, "Button was clicked!");
                    Logger.Log(Logger.Level.Info, e.Id.ToString());
                }
                
                [IgnoreMember]
                public int FieldNotDisplayedInMenu;
            }
            </code>
            </example>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:SMLHelper.Options.Attributes.ButtonAttribute"/>
            <seealso cref="T:SMLHelper.Json.ConfigFile"/>
            <seealso cref="P:SMLHelper.Options.Attributes.MenuAttribute.MemberProcessing"/>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute.Members"/>
        </member>
        <member name="T:SMLHelper.Options.Attributes.KeybindAttribute">
            <summary>
            Attribute used to signify the decorated <see cref="T:UnityEngine.KeyCode"/> should be represented in the mod's
            option menu as a <see cref="T:SMLHelper.Options.ModKeybindOption"/>.
            </summary>
            <example>
            <code>
            using SMLHelper.Json;
            using SMLHelper.Options;
            using UnityEngine;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Keybind("My Keybind")]
                public KeyCode MyKeybind;
            }
            </code>
            </example>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:SMLHelper.Json.ConfigFile"/>
        </member>
        <member name="M:SMLHelper.Options.Attributes.KeybindAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated <see cref="T:UnityEngine.KeyCode"/> should be represented in the mod's option menu
            as a <see cref="T:SMLHelper.Options.ModKeybindOption"/>.
            </summary>
            <param name="label">The label for the keybind. If none is set, the name of the member will be used.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.KeybindAttribute.#ctor">
            <summary>
            Signifies the decorated <see cref="T:UnityEngine.KeyCode"/> should be represented in the mod's option menu
            as a <see cref="T:SMLHelper.Options.ModKeybindOption"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.MemberInfoMetadata`1.GetValue``1(`0)">
            <summary>
            Uses the stored metadata to get the current value of the member.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="config">The config to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:SMLHelper.Options.Attributes.MemberInfoMetadata`1.GetValue(`0)">
            <summary>
            Uses the stored metadata to get the current value of the member.
            </summary>
            <param name="config">The config to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:SMLHelper.Options.Attributes.MemberInfoMetadata`1.SetValue``1(`0,``0)">
            <summary>
            Uses the stored metadata to set the current value of the member.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="config">The config the set the value in.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.MemberInfoMetadata`1.ParseMethodParameterTypes(System.Reflection.MethodInfo)">
            <summary>
            Stores the <see cref="T:System.Type"/> of each parameter of a method to the
            <see cref="F:SMLHelper.Options.Attributes.MemberInfoMetadata`1.MethodParameterTypes"/> array.
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/> of the method to parse.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.MemberInfoMetadata`1.InvokeMethod(`0,System.Object[])">
            <summary>
            Use the stored metadata to invoke the method.
            </summary>
            <param name="config">The config in which the method.</param>
            <param name="arguments">An array of arguments to pass to the method.</param>
        </member>
        <member name="T:SMLHelper.Options.Attributes.MenuAttribute">
             <summary>
             Attribute used to signify a <see cref="T:SMLHelper.Options.ModOptions"/> menu should be automatically generated from a
             <see cref="T:SMLHelper.Json.ConfigFile"/>, as well as specifying options for handling the <see cref="T:SMLHelper.Json.ConfigFile"/>
             and <see cref="T:SMLHelper.Options.ModOptions"/> menu.
             </summary>
             <example>
             <code>
             using SMLHelper.Json;
             using SMLHelper.Options;
             using QModManager.Utility;
             using UnityEngine;
             
             [Menu("SMLHelper Example Mod")]
             public class Config : ConfigFile
             {
                 [Choice("My index-based choice", "Choice 1", "Choice 2", "Choice 3", Tooltip = "A simple tooltip")]
                 [OnChange(nameof(MyGenericValueChangedEvent))]
                 public int ChoiceIndex;
            
                 [Choice("My enum-based choice"), OnChange(nameof(MyGenericValueChangedEvent))]
                 public CustomChoice ChoiceEnum;
             
                 [Keybind("My keybind"), OnChange(nameof(MyGenericValueChangedEvent))]
                 public KeyCode KeybindKey;
             
                 [Slider("My slider", 0, 50, DefaultValue = 25, Format = "{0:F2}"), OnChange(nameof(MyGenericValueChangedEvent))]
                 public float SliderValue;
             
                 [Toggle("My checkbox"), OnChange(nameof(MyCheckboxToggleEvent)), OnChange(nameof(MyGenericValueChangedEvent))]
                 public bool ToggleValue;
             
                 [Button("My button")]
                 public void MyButtonClickEvent(ButtonClickedEventArgs e)
                 {
                     Logger.Log(Logger.Level.Info, "Button was clicked!");
                     Logger.Log(Logger.Level.Info, $"{e.Id}");
                 }
             
                 public void MyCheckboxToggleEvent(ToggleChangedEventArgs e)
                 {
                     Logger.Log(Logger.Level.Info, "Checkbox value was changed!");
                     Logger.Log(Logger.Level.Info, $"{e.Value}");
                 }
             
                 private void MyGenericValueChangedEvent(ModOptionEventArgs e)
                 {
                     Logger.Log(Logger.Level.Info, "Generic value changed!");
                     Logger.Log(Logger.Level.Info, $"{e.Id}: {e.GetType()}");
             
                     switch (e)
                     {
                         case KeybindChangedEventArgs keybindChangedEventArgs:
                             Logger.Log(Logger.Level.Info, keybindChangedEventArgs.KeyName);
                             break;
                         case ChoiceChangedEventArgs choiceChangedEventArgs:
                             Logger.Log(Logger.Level.Info, choiceChangedEventArgs.Value);
                             break;
                         case SliderChangedEventArgs sliderChangedEventArgs:
                             Logger.Log(Logger.Level.Info, sliderChangedEventArgs.Value.ToString());
                             break;
                         case ToggleChangedEventArgs toggleChangedEventArgs:
                             Logger.Log(Logger.Level.Info, toggleChangedEventArgs.Value.ToString());
                             break;
                     }
                  }
             }
             </code>
             </example>
             <seealso cref="T:SMLHelper.Options.Attributes.ChoiceAttribute"/>
             <seealso cref="T:SMLHelper.Options.Attributes.OnChangeAttribute"/>
             <seealso cref="T:SMLHelper.Options.Attributes.KeybindAttribute"/>
             <seealso cref="T:SMLHelper.Options.Attributes.SliderAttribute"/>
             <seealso cref="T:SMLHelper.Options.Attributes.ToggleAttribute"/>
             <seealso cref="T:SMLHelper.Options.Attributes.ButtonAttribute"/>
             <seealso cref="T:SMLHelper.Options.ModOptions"/>
             <seealso cref="T:SMLHelper.Json.ConfigFile"/>
             <seealso cref="T:SMLHelper.Utility.InternalLogger"/>
        </member>
        <member name="T:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents">
            <summary>
            Specifies after which events the config file should be saved to disk automatically.
            </summary>
            <remarks>
            This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.None">
            <summary>
            Never automatically save.
            </summary>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue">
            <summary>
            Save whenever any value is changed.
            </summary>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.SaveGame">
            <summary>
            Save when the player saves the game.
            </summary>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.QuitGame">
            <summary>
            Save when the player quits the game.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.Attributes.MenuAttribute.LoadEvents">
            <summary>
            Specifies after which events the config file should be loaded from disk automatically.
            </summary>
            <remarks>
            This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.LoadEvents.None">
            <summary>
            Never automatically load.
            </summary>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.LoadEvents.MenuRegistered">
            <summary>
            Load when the menu is registered to SMLHelper via <see cref="M:SMLHelper.Handlers.OptionsPanelHandler.RegisterModOptions``1"/>.
            </summary>
            <remarks>
            In normal usage, this option is equivalent to loading when the game is launched.
            </remarks>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.LoadEvents.MenuOpened">
            <summary>
            Load when the menu is opened by the player.
            </summary>
            <remarks>
            Useful for allowing players to edit their config files manually without restarting the game for their changes to take effect.
            </remarks>
        </member>
        <member name="T:SMLHelper.Options.Attributes.MenuAttribute.Members">
            <summary>
            Specifies which members of the <see cref="T:SMLHelper.Json.ConfigFile"/> will be parsed and added to the menu.
            </summary>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.Members.Explicit">
            <summary>
            Only <see langword="public"/> members decorated with a <see cref="T:SMLHelper.Options.Attributes.ModOptionAttribute"/> derivative such as 
            <see cref="T:SMLHelper.Options.Attributes.SliderAttribute"/>, <see cref="T:SMLHelper.Options.Attributes.ChoiceAttribute"/> etc. will be processed.
            </summary>
        </member>
        <member name="F:SMLHelper.Options.Attributes.MenuAttribute.Members.Implicit">
            <summary>
            All <see langword="public"/> members will be processed, and where they are not decorated, a default attribute
            will be generated for them.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.MenuAttribute.Name">
            <summary>
            The display name for the generated options menu.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.MenuAttribute.SaveOn">
            <summary>
            The events after which the config file will be saved to disk automatically.
            Defaults to <see cref="F:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/>.
            </summary>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute.SaveEvents"/>
            <seealso cref="P:SMLHelper.Options.Attributes.MenuAttribute.LoadOn"/>
        </member>
        <member name="P:SMLHelper.Options.Attributes.MenuAttribute.LoadOn">
            <summary>
            The events after which the config file will be loaded from disk automatically.
            Defaults to <see cref="F:SMLHelper.Options.Attributes.MenuAttribute.LoadEvents.MenuRegistered"/>.
            </summary>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute.LoadEvents"/>
            <seealso cref="P:SMLHelper.Options.Attributes.MenuAttribute.SaveOn"/>
        </member>
        <member name="P:SMLHelper.Options.Attributes.MenuAttribute.MemberProcessing">
            <summary>
            How members of the <see cref="T:SMLHelper.Json.ConfigFile"/> will be processed.
            Defaults to <see cref="F:SMLHelper.Options.Attributes.MenuAttribute.Members.Explicit"/>, so that only <see langword="public"/> decorated members will be processed.
            </summary>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute.Members"/>
        </member>
        <member name="M:SMLHelper.Options.Attributes.MenuAttribute.#ctor(System.String)">
            <summary>
            Signifies a <see cref="T:SMLHelper.Options.ModOptions"/> menu should be automatically generated from a <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
            <param name="name">The display name for the generated options menu.</param>
        </member>
        <member name="T:SMLHelper.Options.Attributes.ModOptionAttribute">
            <summary>
            Abstract base attribute used to signify the decorated public member should generate a <see cref="T:SMLHelper.Options.ModOption"/>
            in a mod's options menu.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ModOptionAttribute.Label">
            <summary>
            The label to use when displaying the field in the mod's options menu. If <see cref="P:SMLHelper.Options.Attributes.ModOptionAttribute.LabelLanguageId"/> is set, this
            will be ignored.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ModOptionAttribute.Id">
            <summary>
            The Id to be used for the field in the mod's option menu. If none is specified, one will be automatically generated when
            your <see cref="T:SMLHelper.Json.ConfigFile"/> is registered to the <see cref="T:SMLHelper.Handlers.OptionsPanelHandler"/>. This means it will
            change every time the game is launched, but is guaranteed to be unique. If you would like to specify an Id to use for
            internal comparisons, you can do so here.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ModOptionAttribute.Order">
            <summary>
            The order in which to display fields in the mod's option menu, in ascending order. If none is specified, the order will be
            automatically set.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ModOptionAttribute.Tooltip">
            <summary>
            An optional tooltip to display for the field. If <see cref="P:SMLHelper.Options.Attributes.ModOptionAttribute.TooltipLanguageId"/> is set, this will be ignored.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ModOptionAttribute.LabelLanguageId">
            <summary>
            An optional id to be parsed with <see cref="M:Language.Get(System.String)"/> for the label, allowing for custom language-based strings
            via the <see cref="T:SMLHelper.Handlers.LanguageHandler"/> API. If this is set, it will take precedence.
            </summary>
            <seealso cref="M:SMLHelper.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String)"/>
            <seealso cref="M:Language.Get(System.String)"/>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ModOptionAttribute.TooltipLanguageId">
            <summary>
            An optional id to be parsed with <see cref="M:Language.Get(System.String)"/> for the tooltip, allowing for custom lanaguage-based strings
            via the <see cref="T:SMLHelper.Handlers.LanguageHandler"/> API. If this is set, it will take precedence.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ModOptionAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated member should be represented in the mod's options menu as a <see cref="T:SMLHelper.Options.ModOption"/>
            with an optional label.
            </summary>
            <param name="label">The label to display. If none is set, the name of the member will be used. If <see cref="P:SMLHelper.Options.Attributes.ModOptionAttribute.LabelLanguageId"/>
            is set, this will be ignored.</param>
        </member>
        <member name="T:SMLHelper.Options.Attributes.ModOptionEventAttribute">
            <summary>
            Abstract base attribute used to signify a method to call whenever the derivative event is invoked for the decorated member.
            </summary>
            <remarks>
            The method must be a member of the same class.
            </remarks>
        </member>
        <member name="P:SMLHelper.Options.Attributes.ModOptionEventAttribute.MethodName">
            <summary>
            The name of the method to invoke.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ModOptionEventAttribute.#ctor(System.String)">
            <summary>
            Signifies a method to call whenever the derivative event is invoked for the decorated member.
            </summary>
            <remarks>
            The method must be a member of the same class.
            </remarks>
            <param name="methodName">The name of the method within the same class to invoke.</param>
        </member>
        <member name="T:SMLHelper.Options.Attributes.OnChangeAttribute">
            <summary>
            Attribute used to signify a method to call whenever the decorated member's value changes.
            </summary>
            <remarks>
            The method must be a member of the same class. Can be specified mutliple times to call multiple methods.
            <para>
            The specified method can take the following parameters in any order:<br/>
            - <see cref="T:System.Object"/> sender: The sender of the event<br/>
            - <see cref="T:System.EventArgs"/> eventArgs: The generalized event arguments of the event<br/>
            - <see cref="T:SMLHelper.Options.ChoiceChangedEventArgs"/> choiceChangedEventArgs: Only when the member corresponds to a
              <see cref="T:SMLHelper.Options.ModChoiceOption"/><br/>
            - <see cref="T:SMLHelper.Options.KeybindChangedEventArgs"/> keybindChangedEventArgs: Only when the member correspends to a
              <see cref="T:SMLHelper.Options.ModKeybindOption"/><br/>
            - <see cref="T:SMLHelper.Options.SliderChangedEventArgs"/> sliderChangedEventArgs: Only when the member corresponds to a
              <see cref="T:SMLHelper.Options.ModSliderOption"/><br/>
            - <see cref="T:SMLHelper.Options.ToggleChangedEventArgs"/> toggleChangedEventArgs: Only when the member corresponds to a
              <see cref="T:SMLHelper.Options.ModToggleOption"/>
            </para>
            </remarks>
            <example>
            <code>
            using SMLHelper.Json;
            using SMLHelper.Options;
            using QModManager.Utility;
            using UnityEngine;
            
            [Menu("SMLHelper Example Mod")]
            public class Config : ConfigFile
            {
                [Toggle("My checkbox"), OnChange(nameof(MyCheckboxToggleEvent)), OnChange(nameof(MyGenericValueChangedEvent))]
                public bool ToggleValue;
                
                public void MyCheckboxToggleEvent(ToggleChangedEventArgs e)
                {
                    Logger.Log(Logger.Level.Info, "Checkbox value was changed!");
                    Logger.Log(Logger.Level.Info, $"{e.Value}");
                }
            
                private void MyGenericValueChangedEvent(ModOptionEventArgs e)
                {
                    Logger.Log(Logger.Level.Info, "Generic value changed!");
                    Logger.Log(Logger.Level.Info, $"{e.Id}: {e.GetType()}");
            
                    switch (e)
                    {
                        case KeybindChangedEventArgs keybindChangedEventArgs:
                            Logger.Log(Logger.Level.Info, keybindChangedEventArgs.KeyName);
                            break;
                        case ChoiceChangedEventArgs choiceChangedEventArgs:
                            Logger.Log(Logger.Level.Info, choiceChangedEventArgs.Value);
                            break;
                        case SliderChangedEventArgs sliderChangedEventArgs:
                            Logger.Log(Logger.Level.Info, sliderChangedEventArgs.Value.ToString());
                            break;
                        case ToggleChangedEventArgs toggleChangedEventArgs:
                            Logger.Log(Logger.Level.Info, toggleChangedEventArgs.Value.ToString());
                            break;
                    }
                 }
            </code>
            </example>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:SMLHelper.Options.Attributes.ToggleAttribute"/>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="T:SMLHelper.Options.ChoiceChangedEventArgs"/>
            <seealso cref="T:SMLHelper.Options.KeybindChangedEventArgs"/>
            <seealso cref="T:SMLHelper.Options.SliderChangedEventArgs"/>
            <seealso cref="T:SMLHelper.Options.ToggleChangedEventArgs"/>
            <seealso cref="T:SMLHelper.Json.ConfigFile"/>
            <seealso cref="T:SMLHelper.Options.Attributes.OnGameObjectCreatedAttribute"/>
            <seealso cref="T:SMLHelper.Utility.InternalLogger"/>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OnChangeAttribute.#ctor(System.String)">
            <summary>
            Signifies a method to call whenever the decorated member's value changes.
            </summary>
            <remarks>
            The method must be a member of the same class.
            </remarks>
            <param name="methodName">The name of the method within the same class to invoke.</param>
        </member>
        <member name="T:SMLHelper.Options.Attributes.OnGameObjectCreatedAttribute">
            <summary>
            Attribute used to signify a method to call whenever the <see cref="T:UnityEngine.GameObject"/> for the 
            <see cref="T:SMLHelper.Options.ModOption"/> corresponding to the decorated member is created.
            </summary>
            <remarks>
            The method must be a member of the same class. Can be specified multiple times to call multiple methods.
            <para>
            The specified method can optionally take the following parameters in any order:<br/>
            - <see cref="T:System.Object"/> sender: The sender of the event<br/>
            - <see cref="T:System.EventArgs"/> eventArgs: The generalized event arguments of the event<br/>
            - <see cref="T:SMLHelper.Options.GameObjectCreatedEventArgs"/> gameObjectCreatedEventArgs: The <see cref="T:SMLHelper.Options.GameObjectCreatedEventArgs"/>
              for the event
            </para>
            </remarks>
            <example>
            <code>
            using SMLHelper.Json;
            using SMLHelper.Options;
            using QModManager.Utility;
            using UnityEngine;
            
            [Menu("SMLHelper Example Mod")]
            public class Config : ConfigFile
            {
                [Toggle("My checkbox"), OnGameObjectCreated(nameof(MyGameObjectCreatedEvent))]
                public bool ToggleValue;
            
                private void MyGameObjectCreatedEvent(GameObjectCreatedEventArgs e)
               {
                   Logger.Log(Logger.Level.Info, "GameObject was created");
                   Logger.Log(Logger.Level.Info, $"{e.Id}: {e.GameObject}");
               }
            }
            </code>
            </example>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:SMLHelper.Options.Attributes.ToggleAttribute"/>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="T:SMLHelper.Options.GameObjectCreatedEventArgs"/>
            <seealso cref="T:SMLHelper.Options.Attributes.OnChangeAttribute"/>
            <seealso cref="T:SMLHelper.Utility.InternalLogger"/>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OnGameObjectCreatedAttribute.#ctor(System.String)">
            <summary>
            Signifies a method to call whenever the <see cref="T:UnityEngine.GameObject"/> for the 
            <see cref="T:SMLHelper.Options.ModOption"/> corresponding to the decorated member is created.
            </summary>
            <remarks>
            The method must be a member of the same class.
            </remarks>
            <param name="methodName">The name of the method within the same class to invoke.</param>
        </member>
        <member name="T:SMLHelper.Options.Attributes.OptionsMenuBuilder`1">
            <summary>
            An internal derivative of <see cref="T:SMLHelper.Options.ModOptions"/> for use in auto-generating a menu based on attributes
            declared in a <see cref="T:SMLHelper.Json.ConfigFile"/>.
            </summary>
            <typeparam name="T">The type of the class derived from <see cref="T:SMLHelper.Json.ConfigFile"/> to use for
            loading to/saving from disk.</typeparam>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OptionsMenuBuilder`1.#ctor">
            <summary>
            Instantiates a new <see cref="T:SMLHelper.Options.Attributes.OptionsMenuBuilder`1"/>, generating <see cref="T:SMLHelper.Options.ModOption"/>s by parsing the fields,
            properties and methods declared in the class.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OptionsMenuBuilder`1.BuildModOptions(uGUI_TabbedControlsPanel,System.Int32,System.Collections.Generic.List{SMLHelper.Options.OptionItem})">
            <summary>
            Adds options to the menu based on the <see cref="P:SMLHelper.Options.Attributes.OptionsMenuBuilder`1.ConfigFileMetadata"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OptionsMenuBuilder`1.BuildModButtonOption(System.String,System.String,SMLHelper.Options.Attributes.MemberInfoMetadata{`0})">
            <summary>
            Adds a <see cref="T:SMLHelper.Options.ModButtonOption"/> to the <see cref="T:SMLHelper.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OptionsMenuBuilder`1.BuildModChoiceOption(System.String,System.String,SMLHelper.Options.Attributes.MemberInfoMetadata{`0},SMLHelper.Options.Attributes.ChoiceAttribute)">
            <summary>
            Adds a <see cref="T:SMLHelper.Options.ModChoiceOption"/> to the <see cref="T:SMLHelper.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
            <param name="choiceAttribute">The defined or generated <see cref="T:SMLHelper.Options.Attributes.ChoiceAttribute"/> of the member.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OptionsMenuBuilder`1.BuildModKeybindOption(System.String,System.String,SMLHelper.Options.Attributes.MemberInfoMetadata{`0})">
            <summary>
            Adds a <see cref="T:SMLHelper.Options.ModKeybindOption"/> to the <see cref="T:SMLHelper.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OptionsMenuBuilder`1.BuildModSliderOption(System.String,System.String,SMLHelper.Options.Attributes.MemberInfoMetadata{`0},SMLHelper.Options.Attributes.SliderAttribute)">
            <summary>
            Adds a <see cref="T:SMLHelper.Options.ModSliderOption"/> to the <see cref="T:SMLHelper.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
            <param name="sliderAttribute">The defined or generated <see cref="T:SMLHelper.Options.Attributes.SliderAttribute"/> of the member.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.OptionsMenuBuilder`1.BuildModToggleOption(System.String,System.String,SMLHelper.Options.Attributes.MemberInfoMetadata{`0})">
            <summary>
            Adds a <see cref="T:SMLHelper.Options.ModToggleOption"/> to the <see cref="T:SMLHelper.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
        </member>
        <member name="T:SMLHelper.Options.Attributes.SliderAttribute">
            <summary>
            Attribute used to signify the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented
            in the mod's option menu as a <see cref="T:SMLHelper.Options.ModSliderOption"/>.
            </summary>
            <example>
            <code>
            using SMLHelper.Json;
            using SMLHelper.Options;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Slider("My Slider", 0, 50, DefaultValue = 25, Format = "{0:F2}")]
                public float MySlider;
            }
            </code>
            </example>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:SMLHelper.Json.ConfigFile"/>
        </member>
        <member name="P:SMLHelper.Options.Attributes.SliderAttribute.Min">
            <summary>
            The minimum value of the slider.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.SliderAttribute.Max">
            <summary>
            The maximum value of the slider.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.SliderAttribute.DefaultValue">
            <summary>
            The default value of the slider.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.SliderAttribute.Format">
            <summary>
            The format to use when displaying the value, e.g. "{0:F2}" or "{0:F0} %"
            </summary>
        </member>
        <member name="P:SMLHelper.Options.Attributes.SliderAttribute.Step">
            <summary>
            The step to apply to the slider (ie. round to nearest)
            </summary>
        </member>
        <member name="M:SMLHelper.Options.Attributes.SliderAttribute.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Signifies the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented in the mod's
            options menu as a <see cref="T:SMLHelper.Options.ModSliderOption"/>.
            </summary>
            <param name="label">The label for the slider. If none is set, the name of the method will be used.</param>
            <param name="min">The minimum value of the slider.</param>
            <param name="max">The maximum value of the slider.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.SliderAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Signifies the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented in the mod's
            options menu as a <see cref="T:SMLHelper.Options.ModSliderOption"/>.
            </summary>
            <param name="min">The minimum value of the slider.</param>
            <param name="max">The maximum value of the slider.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.SliderAttribute.#ctor(System.String)">
            <summary>
            Signifies the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented in the mod's
            options menu as a <see cref="T:SMLHelper.Options.ModSliderOption"/>.
            </summary>
            <param name="label">The label for the slider. If none is set, the name of the method will be used.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.SliderAttribute.#ctor">
            <summary>
            Signifies the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented in the mod's
            options menu as a <see cref="T:SMLHelper.Options.ModSliderOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.Attributes.ToggleAttribute">
            <summary>
            Attribute used to signify the decorated <see cref="T:System.Boolean"/> should be represented in the mod's
            option menu as a <see cref="T:SMLHelper.Options.ModToggleOption"/>.
            </summary>
            <example>
            <code>
            using SMLHelper.Json;
            using SMLHelper.Options;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Toggle("My Toggle")]
                public bool MyToggle;
            }
            </code>
            </example>
            <seealso cref="T:SMLHelper.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:SMLHelper.Json.ConfigFile"/>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ToggleAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated <see cref="T:System.Boolean"/> should be represented in the mod's option menu
            as a <see cref="T:SMLHelper.Options.ModToggleOption"/>.
            </summary>
            <param name="label">The label for the toggle.</param>
        </member>
        <member name="M:SMLHelper.Options.Attributes.ToggleAttribute.#ctor">
            <summary>
            Signifies the decorated <see cref="T:System.Boolean"/> should be represented in the mod's option menu
            as a <see cref="T:SMLHelper.Options.ModToggleOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.ButtonClickedEventArgs">
            <summary>
            Contains all the information about a button click event.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ButtonClickedEventArgs.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:SMLHelper.Options.ButtonClickedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:SMLHelper.Options.ModButtonOption"/> that was clicked.</param>
        </member>
        <member name="T:SMLHelper.Options.ModButtonOption">
            <summary>
            A mod option class for handling a button that can be clicked.
            </summary>
        </member>
        <member name="E:SMLHelper.Options.ModButtonOption.OnPressed">
            <summary>
            The event that is called whenever an option is changed.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModButtonOption.GetDelegates">
            <summary>
            Gets the Invocation List for the OnPressed event or returns null if none present.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModButtonOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:SMLHelper.Options.ModButtonOption.Factory(System.String,System.String,System.Action{SMLHelper.Options.ButtonClickedEventArgs})">
            <summary>
            Creates a new <see cref="T:SMLHelper.Options.ModButtonOption"/> for handling a button that can be clicked.
            </summary>
            <param name="id">The internal ID of this option.</param>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="onPressed"> Action to trigger when button is pressed. Can leave as Null and then add events using the OnPressed += method;</param>
        </member>
        <member name="P:SMLHelper.Options.ModButtonOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.ChoiceChangedEventArgs">
            <summary>
            Contains all the information about a choice changed event.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ChoiceChangedEventArgs.#ctor(System.String,System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
            <summary>
            Constructs a new <see cref="T:SMLHelper.Options.ChoiceChangedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:SMLHelper.Options.ModChoiceOption"/> that was changed.</param>
            <param name="value">The value of the <see cref="T:SMLHelper.Options.ModChoiceOption"/> as a string.</param>
        </member>
        <member name="T:SMLHelper.Options.ModChoiceOption">
            <summary>
            A mod option class for handling an option that can select one item from a list of values.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModChoiceOption.Options">
            <summary>
            The array of readable string options to choose between in the <see cref="T:SMLHelper.Options.ModChoiceOption"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModChoiceOption.Index">
            <summary>
            The currently selected index among the options array.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModChoiceOption.Tooltip">
            <summary>
            The tooltip to show when hovering over the option.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModChoiceOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:SMLHelper.Options.ModChoiceOption.Factory(System.String,System.String,System.String[],System.Int32,System.String)">
            <summary>
            Adds a new <see cref="T:SMLHelper.Options.ModChoiceOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="index">The starting value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="M:SMLHelper.Options.ModChoiceOption.Factory(System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Adds a new <see cref="T:SMLHelper.Options.ModChoiceOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="value">The starting value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="M:SMLHelper.Options.ModChoiceOption.Factory(System.String,System.String,System.Object[],System.Int32,System.String)">
            <summary>
            Adds a new <see cref="T:SMLHelper.Options.ModChoiceOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="index">The starting value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="M:SMLHelper.Options.ModChoiceOption.Factory(System.String,System.String,System.Object[],System.Object,System.String)">
            <summary>
            Adds a new <see cref="T:SMLHelper.Options.ModChoiceOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="value">The starting value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="M:SMLHelper.Options.ModChoiceOption.Factory``1(System.String,System.String,``0,System.String)">
            <summary>
            Adds a new <see cref="T:SMLHelper.Options.ModChoiceOption"/> to this instance, automatically using the values of an enum
            </summary>
            <typeparam name="T">The enum which will be used to populate the options</typeparam>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="value">The starting value</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="P:SMLHelper.Options.ModChoiceOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.KeybindChangedEventArgs">
            <summary>
            Contains all the information about a keybind changed event.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.KeybindChangedEventArgs.#ctor(System.String,UnityEngine.KeyCode)">
            <summary>
            Constructs a new <see cref="T:SMLHelper.Options.KeybindChangedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:SMLHelper.Options.ModKeybindOption"/> that was changed.</param>
            <param name="key">The new value for the <see cref="T:SMLHelper.Options.ModKeybindOption"/>.</param>
        </member>
        <member name="T:SMLHelper.Options.ModKeybindOption">
            <summary>
            A mod option class for handling an option that is a keybind.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModKeybindOption.Device">
            <summary>
            The currently select input source device for the <see cref="T:SMLHelper.Options.ModKeybindOption"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModKeybindOption.Factory(System.String,System.String,GameInput.Device,UnityEngine.KeyCode)">
            <summary>
            Creates a new <see cref="T:SMLHelper.Options.ModKeybindOption"/> for handling an option that is a keybind.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="device">The device name.</param>
            <param name="key">The starting keybind value.</param>
        </member>
        <member name="M:SMLHelper.Options.ModKeybindOption.Factory(System.String,System.String,GameInput.Device,System.String)">
            <summary>
            Creates a new <see cref="T:SMLHelper.Options.ModKeybindOption"/> for handling an option that is a keybind.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="device">The device name.</param>
            <param name="key">The starting keybind value.</param>
        </member>
        <member name="M:SMLHelper.Options.ModKeybindOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="P:SMLHelper.Options.ModKeybindOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.ModOptions">
            <summary>
            Abstract class that provides the framework for your mod's in-game configuration options.
            </summary>
        </member>
        <member name="F:SMLHelper.Options.ModOptions.Name">
            <summary>
            The name of this set of configuration options.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModOptions.Options">
            <summary>
            Obtains the <see cref="T:SMLHelper.Options.ModOption"/>s that belong to this instance. Can be null.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModOptions.AddItem(SMLHelper.Options.OptionItem)">
            <summary>
            <para>Attaches a <see cref="T:SMLHelper.Options.OptionItem"/> to the options menu.</para>
            </summary>
            <param name="option">The <see cref="T:SMLHelper.Options.OptionItem"/> to add to the options menu.</param>
        </member>
        <member name="M:SMLHelper.Options.ModOptions.RemoveItem(System.String)">
            <summary>
            <para>Attaches a <see cref="T:SMLHelper.Options.OptionItem"/> to the options menu.</para>
            </summary>
            <param name="id">The id of the <see cref="T:SMLHelper.Options.OptionItem"/> to remove from the options menu.</param>
        </member>
        <member name="M:SMLHelper.Options.ModOptions.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:SMLHelper.Options.ModOptions"/>.
            </summary>
            <param name="name">The name that will display above this section of options in the in-game menu.</param>
        </member>
        <member name="M:SMLHelper.Options.ModOptions.BuildModOptions(uGUI_TabbedControlsPanel,System.Int32,System.Collections.Generic.List{SMLHelper.Options.OptionItem})">
            <summary>
            Builds up the configuration the options.
            </summary>
        </member>
        <member name="E:SMLHelper.Options.ModOptions.OnChanged">
            <summary>
            The event that is called whenever an option is changed.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModOptions.GetDelegates">
            <summary>
            Gets the Invocation List for the OnChanged event or returns null if none present.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModOptions.OnChange``2(System.String,``1)">
            <summary>
            Notifies an option change to all subscribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="E:SMLHelper.Options.ModOptions.GameObjectCreated">
            <summary> The event that is called whenever a game object created for the option </summary>
        </member>
        <member name="T:SMLHelper.Options.GameObjectCreatedEventArgs">
            <summary> Contains all the information about a created game object event </summary>
        </member>
        <member name="M:SMLHelper.Options.GameObjectCreatedEventArgs.#ctor(System.String,UnityEngine.GameObject)">
            <summary> Constructs a new <see cref="T:SMLHelper.Options.GameObjectCreatedEventArgs"/> </summary>
            <param name="id"> The ID of the <see cref="T:SMLHelper.Options.ModOption"/> for which game object was created </param>
            <param name="gameObject"> New game object for the <see cref="T:SMLHelper.Options.ModOption"/> </param>
        </member>
        <member name="T:SMLHelper.Options.ModOption">
            <summary>
            The common abstract class to all mod options.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModOption.GetValueType">
            <summary>
            The type of the <see cref="P:SMLHelper.Options.ModOption.Value"/> for the <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModOption.Value">
            <summary>
            The value for the <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModOption.#ctor(System.String,System.String,System.Type,System.Object)">
            <summary>
            Base constructor for all mod options.
            </summary>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="id">The internal ID if this option.</param>
            <param name="T">The type of the object for casting purposes if necessary.</param>
            <param name="value">The generic value of the <see cref="T:SMLHelper.Options.ModOption"/>.</param>
        </member>
        <member name="T:SMLHelper.Options.ModOption`1">
            <summary>
            The common generic-typed abstract class to all mod options.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModOption`1.Value">
            <summary>
            The value for the <see cref="T:SMLHelper.Options.ModOption`1"/>.
            </summary>
        </member>
        <member name="E:SMLHelper.Options.ModOption`1.OnChanged">
            <summary>
            The event that is called whenever an option is changed.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModOption`1.GetDelegates">
            <summary>
            Gets the Invocation List for the OnChanged event or returns null if none present.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModOption`1.OnChange``2(System.String,``1)">
            <summary>
            Notifies an option change to all subscribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:SMLHelper.Options.ModOption`1.#ctor(System.String,System.String,`0)">
            <summary>
            Base constructor for all typed mod options.
            </summary>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="id">The internal ID if this option.</param>
            <param name="value">The typed value of the <see cref="T:SMLHelper.Options.ModOption"/></param>
        </member>
        <member name="T:SMLHelper.Options.OptionItem">
            <summary>
            The common abstract class to all items in the mod options page.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.OptionItem.Id">
            <summary>
            The internal ID that identifies this option.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.OptionItem.Label">
            <summary>
            The display text to be shown for this option in the in-game menus.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.OptionItem.OptionGameObject">
            <summary> UI GameObject for this option </summary>
        </member>
        <member name="F:SMLHelper.Options.OptionItem.parentOptions">
            <summary> Parent <see cref="T:SMLHelper.Options.ModOptions"/> for this option </summary>
        </member>
        <member name="M:SMLHelper.Options.OptionItem.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:SMLHelper.Options.OptionItem.#ctor(System.String,System.String)">
            <summary>
            Base constructor for all items in the options.
            </summary>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="id">The internal ID if this option.</param>
        </member>
        <member name="P:SMLHelper.Options.OptionItem.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.OptionItem.ModOptionAdjust">
            <summary>
            The base 'adjuster' component to prevent UI elements overlapping
            </summary>
        </member>
        <member name="P:SMLHelper.Options.OptionItem.ModOptionAdjust.CaptionWidth">
            <summary>
            The width of the caption for the component
            </summary>
        </member>
        <member name="P:SMLHelper.Options.OptionItem.ModOptionAdjust.isMainMenu">
            <summary>
            Whether we are in the main menu or in game in the options
            </summary>
        </member>
        <member name="M:SMLHelper.Options.OptionItem.ModOptionAdjust.SetVec2x(UnityEngine.Vector2,System.Single)">
            <summary>
            Sets the X coordinate of a <see cref="T:UnityEngine.Vector2"/>.
            </summary>
            <param name="vec">The <see cref="T:UnityEngine.Vector2"/> to set the value on.</param>
            <param name="val">The value to set to the x coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Options.OptionItem.ModOptionAdjust.Awake">
            <summary>
            The function called after this <see cref="T:UnityEngine.MonoBehaviour"/> is awakened.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.OptionItem.ModOptionAdjust.SetCaptionGameObject(System.String,System.Single)">
            <summary>
            Creates and adds a caption to this GameObject
            </summary>
            <param name="gameObjectPath"></param>
            <param name="minWidth"></param>
        </member>
        <member name="T:SMLHelper.Options.SliderChangedEventArgs">
            <summary>
            Contains all the information about a slider changed event.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.SliderChangedEventArgs.#ctor(System.String,System.Single)">
            <summary>
            Constructs a new <see cref="T:SMLHelper.Options.SliderChangedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:SMLHelper.Options.ModSliderOption"/> that was changed.</param>
            <param name="value">The new value for the <see cref="T:SMLHelper.Options.ModSliderOption"/>.</param>
        </member>
        <member name="T:SMLHelper.Options.ModSliderOption">
            <summary>
            A mod option class for handling an option that can have any floating point value between a minimum and maximum.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.MinValue">
            <summary>
            The minimum value of the <see cref="T:SMLHelper.Options.ModSliderOption"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.MaxValue">
            <summary>
            The maximum value of the <see cref="T:SMLHelper.Options.ModSliderOption"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.DefaultValue">
            <summary>
            The default value of the <see cref="T:SMLHelper.Options.ModSliderOption"/>.
            Showed on the slider by small gray circle. Slider's handle will snap to the default value near it.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.Step">
            <summary>
            The step value of the <see cref="T:SMLHelper.Options.ModSliderOption"/> defaults to 1.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.ValueFormat">
            <summary> Float Format for value field (<see cref="M:SMLHelper.Options.ModSliderOption.Factory(System.String,System.String,System.Single,System.Single,System.Single,System.Nullable{System.Single},System.String,System.Single,System.String)"/>) </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.Tooltip">
            <summary>
            The tooltip to show when hovering over the option.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.Factory(System.String,System.String,System.Single,System.Single,System.Single,System.Nullable{System.Single},System.String,System.Single,System.String)">
            <summary>
            Creates a new <see cref="T:SMLHelper.Options.ModSliderOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the slider option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="minValue">The minimum value for the range.</param>
            <param name="maxValue">The maximum value for the range.</param>
            <param name="value">The starting value.</param>
            <param name="defaultValue">The default value for the slider. If this is null then 'value' used as default.   uses value</param>
            <param name="step">Step for the slider, ie. round to nearest X.   defaults to 1</param>
            <param name="tooltip">The tooltip to show when hovering over the option. defaults to no tooltip.</param>
            <param name="valueFormat"> format for values when labelMode is set to <see cref="F:SliderLabelMode.Float"/>, e.g. "{0:F2}" for 2 decimals or "{0:F0} for no decimals %"
            (more on this <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">here</see>)</param>
        </member>
        <member name="T:SMLHelper.Options.ModSliderOption.SliderValue">
            <summary>
            Component for customizing slider's value behaviour.
            If you need more complex behaviour than just custom value format then you can inherit this component 
            and add it to "Slider" game object in OnGameObjectCreated event (see <see cref="M:SMLHelper.Options.ModSliderOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)"/> for details on adding component)
            You can override value converters <see cref="M:SMLHelper.Options.ModSliderOption.SliderValue.ConvertToDisplayValue(System.Single)"/> and <see cref="M:SMLHelper.Options.ModSliderOption.SliderValue.ConvertToSliderValue(System.Single)"/>,
            in that case internal range for slider will be changed to [0.0f : 1.0f] and you can control displayed value with these converters
            (also this value will be passed to <see cref="M:SMLHelper.Options.ModOptions.OnChange``2(System.String,``1)"/> event)
            </summary>
        </member>
        <member name="F:SMLHelper.Options.ModSliderOption.SliderValue.label">
            <summary> The value label of the <see cref="T:SMLHelper.Options.ModSliderOption.SliderValue"/> </summary>
        </member>
        <member name="F:SMLHelper.Options.ModSliderOption.SliderValue.slider">
            <summary> The slider controlling this <see cref="T:SMLHelper.Options.ModSliderOption.SliderValue"/> </summary>
        </member>
        <member name="F:SMLHelper.Options.ModSliderOption.SliderValue.minValue">
            <summary>
            The minimum value of the <see cref="T:SMLHelper.Options.ModSliderOption.SliderValue"/>.
            In case of custom value converters it can be not equal to internal minimum value for slider
            </summary>
        </member>
        <member name="F:SMLHelper.Options.ModSliderOption.SliderValue.maxValue">
            <summary>
            The maximum value of the <see cref="T:SMLHelper.Options.ModSliderOption.SliderValue"/>.
            In case of custom value converters it can be not equal to internal maximum value for slider
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.SliderValue.ValueFormat">
            <summary> Custom value format property. Set it right after adding component to game object for proper behaviour </summary>
        </member>
        <member name="F:SMLHelper.Options.ModSliderOption.SliderValue.valueFormat">
            <summary> Custom value format </summary>
        </member>
        <member name="F:SMLHelper.Options.ModSliderOption.SliderValue.Step">
            <summary> Step for the slider </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.SliderValue.ValueWidth">
            <summary>
            Width for value text field. Used by <see cref="T:SMLHelper.Options.ModSliderOption.SliderOptionAdjust"/> to adjust label width.
            It is calculated in <see cref="M:SMLHelper.Options.ModSliderOption.SliderValue.UpdateValueWidth"/>, but you can override this property.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.SliderValue.InitConverters">
            <summary> Override this if you need to initialize custom value converters </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.SliderValue.ConvertToDisplayValue(System.Single)">
            <summary> Converts internal slider value [0.0f : 1.0f] to displayed value </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.SliderValue.ConvertToSliderValue(System.Single)">
            <summary> Converts displayed value to internal slider value [0.0f : 1.0f] </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.SliderValue.Awake">
            <summary> Component initialization. If you overriding this, make sure that you calling base.Awake() </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.SliderValue.Start">
            <summary> <see cref="T:UnityEngine.MonoBehaviour"/>.Start() </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.SliderValue.UpdateValueWidth">
            <summary>
            Method for calculating necessary label's width. Creates temporary label and compares widths of min and max values,
            then sets <see cref="P:SMLHelper.Options.ModSliderOption.SliderValue.ValueWidth"/> to the wider. Be aware that in case of using custom converters some intermediate value may be wider than min/max values.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.SliderValue.OnValueChanged(System.Single)">
            <summary> Called when user changes slider value </summary>
        </member>
        <member name="M:SMLHelper.Options.ModSliderOption.SliderValue.UpdateLabel">
            <summary>
            Updates label's text with formatted and converted slider's value.
            Override this if you need even more control on slider's value behaviour.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModSliderOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.ToggleChangedEventArgs">
            <summary>
            Contains all the information about a toggle changed event.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ToggleChangedEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:SMLHelper.Options.ToggleChangedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:SMLHelper.Options.ModToggleOption"/> that was changed.</param>
            <param name="value">The new value for the <see cref="T:SMLHelper.Options.ModToggleOption"/>.</param>
        </member>
        <member name="T:SMLHelper.Options.ModToggleOption">
            <summary>
            A mod option class for handling an option that can be either ON or OFF.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ModToggleOption.Tooltip">
            <summary>
            The tooltip to show when hovering over the option.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ModToggleOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:SMLHelper.Options.ModToggleOption.Factory(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Adds a new <see cref="T:SMLHelper.Options.ModToggleOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="value">The starting value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option. defaults to no tooltip.</param>
        </member>
        <member name="P:SMLHelper.Options.ModToggleOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="T:SMLHelper.Options.OptionEventArgs">
            <summary>
            Interface for event arguments for a <see cref="T:SMLHelper.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.OptionEventArgs.Id">
            <summary>
            The ID of the <see cref="T:SMLHelper.Options.ModOption"/> this event corresponds to.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.OptionEventArgs.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:SMLHelper.Options.OptionEventArgs"/> for handling an event from a <see cref="T:SMLHelper.Options.OptionItem"/>.
            </summary>
            <param name="id">The internal ID of the item.</param>
        </member>
        <member name="T:SMLHelper.Options.ConfigOptionEventArgs`1">
            <summary>
            Interface for event arguments for a <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
        </member>
        <member name="P:SMLHelper.Options.ConfigOptionEventArgs`1.Value">
            <summary>
            The typed Value of the <see cref="T:SMLHelper.Options.ModOption"/> this event corresponds to.
            </summary>
        </member>
        <member name="M:SMLHelper.Options.ConfigOptionEventArgs`1.#ctor(System.String,`0)">
            <summary>
            Instantiates a new <see cref="T:SMLHelper.Options.ConfigOptionEventArgs`1"/> for handling an event from a <see cref="T:SMLHelper.Options.ModOption"/>.
            </summary>
            <param name="id">The internal ID of the option.</param>
            <param name="value">The new value of the option.</param>
        </member>
        <member name="M:SMLHelper.Patchers.ConsoleCommandsPatcher.AddCustomCommand(System.String,System.Reflection.MethodInfo,System.Boolean,System.Object)">
            <summary>
            Adds a custom console command from a target method/delegate.
            </summary>
            <param name="command">The command string that a user should enter.</param>
            <param name="targetMethod">The targeted method.</param>
            <param name="isDelegate">Whether the method is a delegate.</param>
            <param name="instance">The instance the method belongs to.</param>
        </member>
        <member name="M:SMLHelper.Patchers.ConsoleCommandsPatcher.ParseCustomCommands(System.Type)">
            <summary>
            Searches the given <paramref name="type"/> for methods decorated with the <see cref="T:SMLHelper.Commands.ConsoleCommandAttribute"/> and
            passes them on to <see cref="M:SMLHelper.Patchers.ConsoleCommandsPatcher.AddCustomCommand(System.String,System.Reflection.MethodInfo,System.Boolean,System.Object)"/>.
            </summary>
            <param name="type">The type within which to search.</param>
        </member>
        <member name="M:SMLHelper.Patchers.ConsoleCommandsPatcher.DevConsole_Submit_Prefix(System.String,System.Boolean@)">
            <summary>
            Harmony patch on the <see cref="T:DevConsole"/> to intercept user submissions.
            </summary>
            <param name="value">The submitted value.</param>
            <param name="__result">Original result of the method, used to determine whether or not the string will be added to the
            <see cref="F:DevConsole.history"/>.</param>
            <returns>Whether or not to let the original method run.</returns>
        </member>
        <member name="M:SMLHelper.Patchers.ConsoleCommandsPatcher.HandleCommand(System.String)">
            <summary>
            Attempts to handle a user command.
            </summary>
            <param name="input">The command input.</param>
            <returns>Whether we have handled the command. Will return <see langword="true"/> if the command is in our list of
            watched commands, whether or not the parameters were valid.</returns>
        </member>
        <member name="M:SMLHelper.Patchers.ConsoleCommandsPatcher.LogAndAnnounce(System.String,BepInEx.Logging.LogLevel)">
            <summary>
            Logs the message after stripping XML tags (colors), but announces to the user with XML tags intact.
            </summary>
            <param name="message">The message.</param>
            <param name="level">Log level.</param>
        </member>
        <member name="F:SMLHelper.Patchers.ItemActionPatcher.CustomMiddleClickItemAction">
            <summary>
            A constant <see cref="T:ItemAction"/> value to represent a custom middle click item action
            </summary>
        </member>
        <member name="F:SMLHelper.Patchers.ItemActionPatcher.CustomLeftClickItemAction">
            <summary>
            A constant <see cref="T:ItemAction"/> value to represent a custom left click item action
            </summary>
        </member>
        <member name="T:SMLHelper.Patchers.SelfCheckingDictionary`2">
            <summary>
            This dictionary strtucture automatically checks for duplicate keys as they are being added to the collection.
            Duplicate entires are logged and removed from the final collection.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="F:SMLHelper.Patchers.SelfCheckingDictionary`2.DuplicatesDiscarded">
            <summary>
            Maintains a collection of the keys that have encountered duplicates and how many of them were discarded.
            </summary>
        </member>
        <member name="F:SMLHelper.Patchers.SelfCheckingDictionary`2.UniqueEntries">
            <summary>
            Maintains the final collection of only unique keys.
            </summary>
        </member>
        <member name="P:SMLHelper.Patchers.SelfCheckingDictionary`2.Item(`0)">
            <summary>
            Gets a key value pair from the collection or sets a key value pair into the collection.
            When setting, if a key already exists, the previous entry will be discarded.
            </summary>
            <param name="key">The unique key.</param>
            <returns>The value corresponding to the key.</returns>
        </member>
        <member name="M:SMLHelper.Patchers.SelfCheckingDictionary`2.Add(`0,`1)">
            <summary>
            Add a new entry the collection.
            If a duplicate key is found, all entries with that key will be excluded from the final collection.
            </summary>
            <param name="key">The unique key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SMLHelper.Patchers.SelfCheckingDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add a new entry the collection.
            If a duplicate key is found, all entries with that key will be excluded from the final collection.
            </summary>
            <param name="item">The key value pair.</param>
        </member>
        <member name="M:SMLHelper.Patchers.SelfCheckingDictionary`2.DupFoundAllDiscardedLog(`0)">
            <summary>
            Informs the user that all entries for the specified key have been discarded.
            </summary>
            <param name="key">The no longer unique key.</param>
        </member>
        <member name="M:SMLHelper.Patchers.SelfCheckingDictionary`2.DupFoundLastDiscardedLog(`0)">
            <summary>
            Informs the user that the previous entry for the specified key has been discarded.
            </summary>
            <param name="key">The no longer unique key.</param>
        </member>
        <member name="T:SMLHelper.Utility.AudioUtils">
            <summary>
            Utilities for audio and sound
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.CreateSound(System.String,FMOD.MODE)">
            <summary>
            Creates a <see cref="T:FMOD.Sound"/> instance from a path. Can be stored and later used with <see cref="M:SMLHelper.Utility.AudioUtils.PlaySound(FMOD.Sound)"/>
            </summary>
            <param name="path">The path of the sound. Relative to the base game folder.</param>
            <param name="mode"></param>
            <returns>The <see cref="T:FMOD.Sound"/> instance</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.CreateSound(UnityEngine.AudioClip,FMOD.MODE)">
            <summary>
            Creates a <see cref="T:FMOD.Sound"/> instance from an <see cref="T:UnityEngine.AudioClip"/>. Can be stored and later used with <see cref="M:SMLHelper.Utility.AudioUtils.PlaySound(FMOD.Sound)"/>
            </summary>
            <param name="audio">the AudioClip to make a Sound instance of.</param>
            <param name="mode"></param>
            <returns>The <see cref="T:FMOD.Sound"/> instance.</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.CreateSounds(System.Collections.Generic.IEnumerable{UnityEngine.AudioClip},FMOD.MODE)">
            <summary>
            Creates an FMOD <see cref="T:FMOD.Sound"/> collection from an <see cref="T:UnityEngine.AudioClip"/> collection.
            </summary>
            <param name="clips">AudioClips to create from.</param>
            <param name="mode">The mode to set the sound to</param>
            <returns>A collection of FMOD Sounds.</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.CreateSounds(System.Collections.Generic.IEnumerable{System.String},FMOD.MODE)">
            <summary>
            Converts a sound paths collection to an FMOD <see cref="T:FMOD.Sound"/> collection.
            </summary>
            <param name="soundPaths">Sound paths to create from. Relative to the base game folder</param>
            <param name="mode">The mode to set the sound to</param>
            <returns>A collection of FMOD Sounds.</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.PlaySound(UnityEngine.AudioClip,FMOD.MODE)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> from an <see cref="T:UnityEngine.AudioClip"/>.
            </summary>
            <param name="audio">The AudioClip of the sound.</param>
            <param name="mode"></param>
            <returns>The channel on which the sound was created.</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.PlaySound(UnityEngine.AudioClip,SMLHelper.Utility.SoundChannel,FMOD.MODE)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> from an <see cref="T:UnityEngine.AudioClip"/>. Has overload for controlling volume.
            </summary>
            <param name="audio">The AudioClip of the sound.</param>
            <param name="mode"></param>
            <param name="volumeControl">Which volume control to adjust sound levels by. How loud sound is.</param>
            <returns>The channel on which the sound was created</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.PlaySound(System.String,FMOD.MODE)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> globally from a path. Must be a .wav file
            </summary>
            <param name="path">The path of the sound. Relative to the base game folder.</param>
            <param name="mode"></param>
            <returns>The channel on which the sound was created</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.PlaySound(System.String,SMLHelper.Utility.SoundChannel,FMOD.MODE)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> globally from a path. Must be a .wav file. Has overload for controlling volume
            </summary>
            <param name="path">The path of the sound. Relative to the base game folder.</param>
            <param name="mode"></param>
            <param name="volumeControl">Which volume control to adjust sound levels by. How loud sound is.</param>
            <returns>The channel on which the sound was created</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.PlaySound(FMOD.Sound)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> globally
            </summary>
            <param name="sound">The sound which should be played</param>
            <returns>The channel on which the sound was created</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.PlaySound(FMOD.Sound,SMLHelper.Utility.SoundChannel)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> globally at specified volume
            </summary>
            <param name="sound">The sound which should be played</param>
            <param name="volumeControl">Which volume control to adjust sound levels by. How loud sound is.</param>
            <returns>The channel on which the sound was created</returns>
        </member>
        <member name="M:SMLHelper.Utility.AudioUtils.PlaySound(FMOD.Sound,FMOD.Studio.Bus)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> on the specified <see cref="T:FMOD.Studio.Bus"/>.
            </summary>
            <param name="sound">The sound which should be played.</param>
            <param name="bus">The bus to play the sound on.</param>
            <returns>The channel on which the sound was created.</returns>
        </member>
        <member name="T:SMLHelper.Utility.AudioUtils.BusPaths">
            <summary>
            A list of the relevant FMOD bus paths the game uses.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.UnderwaterCreatures">
            <summary>
            Used for underwater creature SFXs. Tied to the master volume.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.SurfaceCreatures">
            <summary>
            Used for surface creature SFXs that dont get muted when at the surface of the ocean. Tied to the master volume.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.PDAVoice">
            <summary>
            Used for PDA voices. Tied to the voice volume.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.VoiceOvers">
            <summary>
            Used for encyclopedia VOs. Tied to the voice volume.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.Music">
            <summary>
            Used for main music. Tied to the music volume.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.EnvironmentalMusic">
            <summary>
            Used for environmental music. Tied to the music volume.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.UnderwaterAmbient">
            <summary>
            Used for underwater ambience SFXs. Tied to the ambient volume.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.SurfaceAmbient">
            <summary>
            Used for ambience SFXs that dont get muted when at the surface of the ocean. Tied to the ambient volume.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.AudioUtils.BusPaths.PlayerSFXs">
            <summary>
            Used for player and hand-held tools SFXs. Tied to the master volume.
            </summary>
        </member>
        <member name="T:SMLHelper.Utility.BasicText">
            <summary>
            <para>
            Places a simple text object on the screen and keeps it there until either hidden (or a designated fade-to-black timer has passed). 
            By default uses the same font/size/color as the "Press Any Button To Begin" message at the beginning of the game, and appears 
            centered about 1/3 down the screen, but all parameters can be reconfigured.
            </para>
            <para>
            The idea of the defaults is that new modders don't have to bootstrap a bunch of irritating Unity stuff -- don't have to understand
            what a "Material" is or how to make one, don't have to know to initialize a font, or even a color. Can just start adding text and
            then can always custom and configure on further revision.
            </para>
            </summary>
            <example>
            SIMPLE USAGE EXAMPLE:
            BasicText message = new BasicText();
            message.ShowMessage("This Message Will Fade In 10 Seconds", 10);
            
            COMPLEX USAGE EXAMPLE:
            BasicText message = new BasicText(TextAnchor.UpperLeft); // Note many other properties could also be set as constructor parameters
            message.setColor(Color.red); // Set Color
            message.setSize(20);         // Set Font Size
            message.setLoc(200, 400);    // Set x/y position (0,0 is center of screen)
            message.setFontStyle(FontStyle.Bold); // Bold 
            message.ShowMessage("This message stays on screen until hidden"); // Display message; if fadeout seconds not specified, it just keeps showing
            ... // other things happen, time goes by
            message.Hide(); // Hides the message
            </example>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with all default options.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> at the specified origin point.
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(TMPro.TextAlignmentOptions)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> at a specified <see cref="T:UnityEngine.TextAnchor"/>.
            </summary>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(UnityEngine.Color)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with a specified <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="useColor">The text color to use</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(System.Int32)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with a specified size.
            </summary>
            <param name="useSize">The text size to uset</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(System.Int32,UnityEngine.Color)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with a specified size and <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="useSize">The text size to use</param>
            <param name="useColor">The text color to use</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(System.Int32,TMPro.TextAlignmentOptions)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with a specified size and <see cref="T:UnityEngine.TextAnchor"/>.
            </summary>
            <param name="useSize">The text size to use</param>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(System.Int32,UnityEngine.Color,TMPro.TextAlignmentOptions)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with a specified size, <see cref="T:UnityEngine.Color"/>, and <see cref="T:UnityEngine.TextAnchor"/>.
            </summary>
            <param name="useSize">The text size to use</param>
            <param name="useColor">The text color to use</param>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.Color,TMPro.TextAlignmentOptions)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with a specified origin point, size, <see cref="T:UnityEngine.Color"/>, and <see cref="T:UnityEngine.TextAnchor"/>.
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
            <param name="useSize">The text size to use</param>
            <param name="useColor">The text color to use</param>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.Color)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with a specified origin point, size, and <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
            <param name="useSize">The text size to use</param>
            <param name="useColor">The text color to use</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instances of <see cref="T:SMLHelper.Utility.BasicText"/> with a specified origin point and size.
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
            <param name="useSize">The text size to use</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.ShowMessage(System.String)">
            <summary>
            Shows our text item, with no schedule fade (i.e. indefinitely)
            </summary>
            <param name="s">The text to display</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.ShowMessage(System.String,System.Single)">
            <summary>
            Shows our text item, fading after a specified number of seconds (or stays on indefinitely if 0 seconds)
            </summary>
            <param name="s">The text to display</param>
            <param name="seconds">The duration to hold before fading</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.Hide">
            <summary>
            Hides our text item if it is displaying.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.GetText">
            <summary>
            Returns our current text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.SetLocation(System.Single,System.Single)">
            <summary>
            Sets screen display location (position relative to the actual text is determined by the alignment)
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.SetColor(UnityEngine.Color)">
            <summary>
            Sets the text color
            </summary>
            <param name="useColor">The text color to use</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.ClearColor">
            <summary>
            Resets to using "cloned" color of Subnautica default.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.SetSize(System.Int32)">
            <summary>
            Sets the font size.
            </summary>
            <param name="useSize">The text size to use</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.ClearSize">
            <summary>
            Resets to using "cloned" size of Subnautica default.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.SetFont(TMPro.TMP_FontAsset)">
            <summary>
            Sets the font 
            </summary>
            <param name="useFont">The font to render the text as.</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.ClearFont">
            <summary>
            Resets to using "cloned" font of Subnautica default.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.SetFontStyle(TMPro.FontStyles)">
            <summary>
            Sets the font style.
            </summary>
            <param name="useStyle">The text font style to use</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.ClearFontStyle">
            <summary>
            Resets to using "cloned" font style of Subnautica default.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.SetAlign(TMPro.TextAlignmentOptions)">
            <summary>
            Sets the text anchor.
            </summary>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.ClearAlign">
            <summary>
            Resets to using "cloned" font style of Subnautica default
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.DoAlignment">
            <summary>
            Computes proper transform position based on alignment and size of text.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.BasicText.InitializeText">
            <summary>
            Sets up all of our objects/components, when we are ready to actually display text for the first time.
            </summary>
        </member>
        <member name="T:SMLHelper.Utility.ExtBannedIdManager">
            <summary>
            This class is tasked with checking external txt files for banned IDs that are not to be isssued when patching in new enum entries.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.ExtBannedIdManager.GetBannedIdsFor(System.String,System.Collections.Generic.IList{System.Int32}[])">
            <summary>
            Gets the banned ids, reported by the external files, for the specified enum.
            </summary>
            <param name="enumName">Name of the enum.</param>
            <param name="combineWith">Any previously known banned IDs for this enum can be combined into the final list.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> of banned indexes not to be issued for new entries of the specified enum.</returns>
        </member>
        <member name="M:SMLHelper.Utility.ExtBannedIdManager.GetBannedIdsFor(System.String)">
            <summary>
            Gets the banned ids, reported by the external files, for the specified enum.
            </summary>
            <param name="enumName">Name of the enum.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> of banned indexes not to be issued for new entries of the specified enum.</returns>
        </member>
        <member name="T:SMLHelper.Utility.ImageUtils">
            <summary>
            A collection of image loading utility methods that can create Unity objects from image files at runtime.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.ImageUtils.LoadTextureFromFile(System.String,UnityEngine.TextureFormat)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Texture2D" /> from an image file.
            </summary>
            <param name="filePathToImage">The path to the image file.</param>
            <param name="format">
            <para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para>
            </param>
            <returns>Will return a new <see cref="T:UnityEngine.Texture2D"/> instance if the file exists; Otherwise returns null.</returns>
            <remarks>
            Ripped from: https://github.com/RandyKnapp/SubnauticaModSystem/blob/master/SubnauticaModSystem/Common/Utility/ImageUtils.cs
            </remarks>
        </member>
        <member name="M:SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)">
            <summary>
            Creates a new <see cref="T:Atlas.Sprite" /> from an image file.
            </summary>
            <param name="filePathToImage">The path to the image file.</param>
            <param name="format">
            The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.<br/>
            https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html <br/>
            Don't change this unless you really know what you're doing.
            </param>
            <returns>Will return a new <see cref="T:Atlas.Sprite"/> instance if the file exists; Otherwise returns null.</returns>
        </member>
        <member name="M:SMLHelper.Utility.ImageUtils.LoadSpriteFromTexture(UnityEngine.Texture2D)">
            <summary>
            Creates a new <see cref="T:Atlas.Sprite" /> from an image file.
            </summary>
            <param name="texture2D">The 2D texture to convert into a sprite.</param>
            <returns>
            Will return a new <see cref="T:Atlas.Sprite" /> instance using the provided texture.
            </returns>
        </member>
        <member name="T:SMLHelper.Utility.IOUtilities">
            <summary>
            Utilities for files and paths
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.IOUtilities.Combine(System.String,System.String,System.String[])">
            <summary>
            Works like <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>, but can have more than 2 paths
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Utility.ItemStorageHelper">
            <summary>
            A utility class that offers additional info about <see cref="T:ItemsContainer"/> instances.
            </summary>
            <seealso cref="T:StorageHelper" />
        </member>
        <member name="M:SMLHelper.Utility.ItemStorageHelper.HasRoomForCached(ItemsContainer,System.Int32,System.Int32)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ItemStorageHelper.HasRoomForCached(ItemsContainer,Vector2int)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="itemSize">Size of the item.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ItemStorageHelper.IsEmpty(ItemsContainer)">
            <summary>
            Determines whether the specified container is empty.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ItemStorageHelper.IsFull(ItemsContainer)">
            <summary>
            Determines whether the specified container is full.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is full; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ItemStorageHelper.GetTotalSlots(ItemsContainer)">
            <summary>
            The totals number of 1x1 slots in the container, as calculated by the container's width and height.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.ItemStorageHelper.GetStorageLabel(ItemsContainer)">
            <summary>
            Get the inernal label for the storage container.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The label used and displayed in-game for the container.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ItemStorageHelper.GetAllowedTechTypes(ItemsContainer)">
            <summary>
            Gets the set of techtypes allowed in this container. This set can be altered.
            If the set is null or empty, then all items can be added.
            </summary>
            <param name="container">The container to check.</param>
            <returns>
            The collection of techtypes allowed in the container.
            </returns>
        </member>
        <member name="T:SMLHelper.Utility.JsonUtils">
            <summary>
            A collection of utilities for interacting with JSON files.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.JsonUtils.Load``1(System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Create an instance of <typeparamref name="T"/>, populated with data from the JSON file at the given 
            <paramref name="path"/>.
            </summary>
            <typeparam name="T">The type of object to initialise and populate with JSON data.</typeparam>
            <param name="path">The path on disk at which the JSON file can be found.</param>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not 
            already exist.</param>
            <param name="jsonConverters">An array of <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.</param>
            <returns>The <typeparamref name="T"/> instance populated with data from the JSON file at
            <paramref name="path"/>, or default values if it cannot be found or an error is encountered while parsing the
            file.</returns>
            <seealso cref="M:SMLHelper.Utility.JsonUtils.Load``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Utility.JsonUtils.Save``1(``0,System.String,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Utility.JsonUtils.Load``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads data from the JSON file at <paramref name="path"/> into the <paramref name="jsonObject"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="jsonObject"/> to populate with JSON data.</typeparam>
            <param name="jsonObject">The <typeparamref name="T"/> instance to popular with JSON data.</param>
            <param name="path">The path on disk at which the JSON file can be found.</param>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">An array of <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.</param>
            <seealso cref="M:SMLHelper.Utility.JsonUtils.Load``1(System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Utility.JsonUtils.Save``1(``0,System.String,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:SMLHelper.Utility.JsonUtils.Save``1(``0,System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the <paramref name="jsonObject"/> parsed as JSON data to the JSON file at <paramref name="path"/>,
            creating it if it does not exist.
            </summary>
            <typeparam name="T">The type of <paramref name="jsonObject"/> to parse into JSON data.</typeparam>
            <param name="jsonObject">The <typeparamref name="T"/> instance to parse into JSON data.</param>
            <param name="path">The path on disk at which to store the JSON file.</param>
            <param name="jsonConverters">An array of <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.</param>
            <seealso cref="M:SMLHelper.Utility.JsonUtils.Load``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:SMLHelper.Utility.JsonUtils.Load``1(System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="T:SMLHelper.Utility.KeyCodeUtils">
            <summary>
            A collection of <see cref="T:UnityEngine.KeyCode"/> related utility methods.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.KeyCodeToString(UnityEngine.KeyCode)">
            <summary>
            Turn a <seealso cref="T:UnityEngine.KeyCode"/> into a <seealso cref="T:System.String"/>
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.StringToKeyCode(System.String)">
            <summary>
            Turn a <seealso cref="T:System.String"/> into a <seealso cref="T:UnityEngine.KeyCode"/>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetKeyDown(UnityEngine.KeyCode)">
            <summary>
            Check this is the first frame a key has been pressed
            </summary>
            <param name="keyCode"></param>
            <returns>True during the first frame a key has been pressed, otherwise false</returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetKeyDown(System.String)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetKeyDown(System.String)">
            <summary>
            Check this is the first frame a key has been pressed.
            </summary>
            <param name="s"></param>
            <returns>True during the first frame a key has been pressed, otherwise false</returns>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetKeyDown(UnityEngine.KeyCode)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetKeyHeld(UnityEngine.KeyCode)">
            <summary>
            Check a key is currently held down
            </summary>
            <param name="keyCode"></param>
            <returns>True every frame a key is held down, otherwise false</returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetKeyHeld(System.String)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetKeyHeld(System.String)">
            <summary>
            Check a key is currently held down
            </summary>
            <param name="s"></param>
            <returns>True every frame a key is held down, otherwise false</returns>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetKeyHeld(UnityEngine.KeyCode)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetKeyHeldTime(UnityEngine.KeyCode)">
            <summary>
            Check how long a key has been held down
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetKeyHeldTime(System.String)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetKeyHeldTime(System.String)">
            <summary>
            Check how long a key has been held down
            </summary>
            <param name="s"></param>
            <returns></returns>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetKeyHeldTime(UnityEngine.KeyCode)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetKeyUp(UnityEngine.KeyCode)">
            <summary>
            Check this is the frame a key has been released
            </summary>
            <param name="keyCode"></param>
            <returns>True during the first frame a key has been released, otherwise false</returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetKeyUp(System.String)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetKeyUp(System.String)">
            <summary>
            Check this is the first frame a key has been released
            </summary>
            <param name="s"></param>
            <returns>True during the first frame a key has been released, otherwise false</returns>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetKeyUp(UnityEngine.KeyCode)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetAnalogValueForKey(UnityEngine.KeyCode)">
            <summary>
            Gets the analog value for a <seealso cref="T:UnityEngine.KeyCode"/> following the same logic as
            <seealso cref="M:GameInput.GetAnalogValueForButton(GameInput.Button)"/>
            </summary>
            <param name="keyCode"></param>
            <returns>1f while a key is being held, otherwise 0f</returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetAnalogValueForKey(System.String)"/>
        </member>
        <member name="M:SMLHelper.Utility.KeyCodeUtils.GetAnalogValueForKey(System.String)">
            <summary>
            Gets the analog value for a key by <seealso cref="T:System.String"/> value, following the same logic as
            <seealso cref="M:GameInput.GetAnalogValueForButton(GameInput.Button)"/>
            </summary>
            <param name="s"></param>
            <returns>1f while a key is being held, otherwise 0f</returns>
            <seealso cref="M:SMLHelper.Utility.KeyCodeUtils.GetAnalogValueForKey(UnityEngine.KeyCode)"/>
        </member>
        <member name="T:SMLHelper.Utility.MaterialModifiers.MaterialModifier">
            <summary>
            Basic Material Modifier that only affects Particle Systems. By default ignores these materials completely. Can be overriden to implement custom behaviour.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.MaterialModifiers.MaterialModifier.#ctor">
            <summary>
            Basic Material Modifier that only affects Particle Systems. By default ignores these materials completely. Can be overriden to implement custom behaviour.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.MaterialModifiers.MaterialModifier.EditMaterial(UnityEngine.Material,UnityEngine.Renderer,SMLHelper.Utility.MaterialUtils.MaterialType)">
            <summary>
            Method called after all other material conversions have finished.
            </summary>
            <param name="material">The material being modified.</param>
            <param name="renderer">The renderer using the <paramref name="material"/>.</param>
            <param name="materialType">The type of material that this can be expected to be. Determined in <see cref="M:SMLHelper.Utility.MaterialUtils.ApplySNShaders(UnityEngine.GameObject,System.Single,System.Single,System.Single,SMLHelper.Utility.MaterialModifiers.MaterialModifier[])"/> based on specific keywords.</param>
        </member>
        <member name="M:SMLHelper.Utility.MaterialModifiers.MaterialModifier.ApplyChangesToMaterial(UnityEngine.Material,UnityEngine.Renderer,SMLHelper.Utility.MaterialUtils.MaterialType)">
            <summary>
            Only called for Materials on ParticleRenderers. Override to implement your own custom behaviour, such as shader conversions.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.MaterialModifiers.MaterialModifier.BlockShaderConversion(UnityEngine.Material,UnityEngine.Renderer,SMLHelper.Utility.MaterialUtils.MaterialType)">
            <summary>
            Method called before any shader conversions and material modifiers are applied.<br/>
            If <see langword="true"/> is returned from any MaterialModifier, the shader of <paramref name="material"/> will <i>not</i> be converted to MarmosetUBER. However, all modifiers will still be applied normally.
            </summary>
            <param name="material">The material being evalauted.</param>
            <param name="renderer">The renderer using the <paramref name="material"/>.</param>
            <param name="materialType">The type of material that this can be expected to be. Determined in <see cref="M:SMLHelper.Utility.MaterialUtils.ApplySNShaders(UnityEngine.GameObject,System.Single,System.Single,System.Single,SMLHelper.Utility.MaterialModifiers.MaterialModifier[])"/> based on specific keywords.</param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Utility.MaterialUtils">
            <summary>
            Utilities related to Materials and Shaders.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.MaterialUtils.kOpaqueRenderQueue">
            <summary>
            Render queue used by opaque objects.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.MaterialUtils.kTransparencyRenderQueue">
            <summary>
            Render queue used by transparent objects.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.MaterialUtils.ApplySNShaders(UnityEngine.GameObject,System.Single,System.Single,System.Single,SMLHelper.Utility.MaterialModifiers.MaterialModifier[])">
            <summary>
            <para>Applies the necessary settings for Subnautica's standard shader (<see cref="P:SMLHelper.Utility.MaterialUtils.Shaders.MarmosetUBER"/>) to the passed <see cref="T:UnityEngine.GameObject"/>.</para>
            <para><b>The specific changes to each material are influenced by certain keywords in their asset names:</b>
            <br/>"TRANSPARENT": Enables transparency.
            <br/>"CUTOUT": Enables alpha clipping.</para>
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to apply the shaders to (includes all children).</param>
            <param name="shininess">'_Shininess' value of the shader. Recommended range of 1.0f-8.0f.</param>
            <param name="specularIntensity">'_SpecularInt' value of the shader. Values around 1f are recommended.</param>
            <param name="glowStrength">'_GlowStrength' and '_GlowStrengthNight' value of the shader. Should not be absurdly high.</param>
            <param name="modifiers">Optional array of classes that inherit from the <see cref="T:SMLHelper.Utility.MaterialModifiers.MaterialModifier"/> class. This allows for extensive customization of the method. Called in ascending order.</param>
        </member>
        <member name="M:SMLHelper.Utility.MaterialUtils.ApplyUBERShader(UnityEngine.Material,System.Single,System.Single,System.Single,SMLHelper.Utility.MaterialUtils.MaterialType)">
            <summary>
            Applies the <see cref="P:SMLHelper.Utility.MaterialUtils.Shaders.MarmosetUBER"/> Shader to the given material.
            </summary>
            <param name="material">The material to apply changes to.</param>
            <param name="shininess">'_Shininess' value of the shader. Recommended range of 1.0f-8.0f.</param>
            <param name="specularIntensity">'_SpecularInt' value of the shader. Values around 1f are recommended.</param>
            <param name="glowStrength">'_GlowStrength' and '_GlowStrengthNight' value of the shader. Should not be absurdly high.</param>
            <param name="materialType">Controls various settings including alpha clipping and transparency.</param>
        </member>
        <member name="M:SMLHelper.Utility.MaterialUtils.SetMaterialTransparent(UnityEngine.Material,System.Boolean)">
            <summary>
            Toggle the transparency on a material.
            </summary>
            <param name="material"></param>
            <param name="transparent"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.MaterialUtils.SetMaterialCutout(UnityEngine.Material,System.Boolean)">
            <summary>
            Toggle alpha clipping on a material. Incompatbile with transparency.
            </summary>
            <param name="material"></param>
            <param name="cutout"></param>
            <returns></returns>
        </member>
        <member name="T:SMLHelper.Utility.MaterialUtils.Shaders">
            <summary>
            Contains references to various shaders.
            </summary>
        </member>
        <member name="P:SMLHelper.Utility.MaterialUtils.Shaders.MarmosetUBER">
            <summary>
            The <see cref="T:UnityEngine.Shader"/> that is used for most materials in the game.
            </summary>
        </member>
        <member name="P:SMLHelper.Utility.MaterialUtils.Shaders.ParticlesUBER">
            <summary>
            The <see cref="T:UnityEngine.Shader"/> that is used for most particle systems.
            </summary>
        </member>
        <member name="P:SMLHelper.Utility.MaterialUtils.Shaders.IonCube">
            <summary>
            The <see cref="T:UnityEngine.Shader"/> that is used for Ion Cubes.
            </summary>
        </member>
        <member name="T:SMLHelper.Utility.MaterialUtils.MaterialType">
            <summary>
            Enum for some generic types of Materials.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.MaterialUtils.MaterialType.Opaque">
            <summary>
            Solid material with no transparency.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.MaterialUtils.MaterialType.Transparent">
            <summary>
            See-through material.
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.MaterialUtils.MaterialType.Cutout">
            <summary>
            Transparent pixels on the texture are not renderered. Useful for decals.
            </summary>
        </member>
        <member name="P:SMLHelper.Utility.MaterialUtils.IonCubeMaterial">
            <summary>
            Gets the default Ion Cube Material.
            </summary>
        </member>
        <member name="P:SMLHelper.Utility.MaterialUtils.PrecursorGlassMaterial">
            <summary>
            Gets the Precursor Glass Material.
            </summary>
        </member>
        <member name="P:SMLHelper.Utility.MaterialUtils.StasisFieldMaterial">
            <summary>
            Gets the Stasis Rifle's ball Material.
            </summary>
        </member>
        <member name="P:SMLHelper.Utility.MaterialUtils.ForceFieldMaterial">
            <summary>
            Gets the Precursor Force Field Material.
            </summary>
        </member>
        <member name="P:SMLHelper.Utility.MaterialUtils.AirWaterBarrierMaterial">
            <summary>
            Gets the Material used by Alien Bases for the transition between water and air.
            </summary>
        </member>
        <member name="T:SMLHelper.Utility.PlayerPrefsExtra">
            <summary>
            A collection of utility methods that simplify calls into <see cref="T:UnityEngine.PlayerPrefs"/> for quick custom save data.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetBool(System.String,System.Boolean)">
            <summary>
            Get a <see cref="T:System.Boolean"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.SetBool(System.String,System.Boolean)">
            <summary>
            Set a <see cref="T:System.Boolean"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetKeyCode(System.String,UnityEngine.KeyCode)">
            <summary>
            Get a <see cref="T:UnityEngine.KeyCode"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.SetKeyCode(System.String,UnityEngine.KeyCode)">
            <summary>
            Set a <see cref="T:UnityEngine.KeyCode"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetColor(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetColor(System.String,UnityEngine.Color)">
            <summary>
            Get a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.SetColor(System.String,UnityEngine.Color)">
            <summary>
            Set a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetVector2(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetVector2(System.String,UnityEngine.Vector2)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.SetVector2(System.String,UnityEngine.Vector2)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetVector2int(System.String)">
            <summary>
            Get a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetVector2int(System.String,Vector2int)">
            <summary>
            Get a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.SetVector2int(System.String,Vector2int)">
            <summary>
            Set a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetVector3(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetVector3(System.String,UnityEngine.Vector3)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.SetVector3(System.String,UnityEngine.Vector3)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetVector4(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetVector4(System.String,UnityEngine.Vector4)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.SetVector4(System.String,UnityEngine.Vector4)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetQuaternion(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.GetQuaternion(System.String,UnityEngine.Quaternion)">
            <summary>
            Get a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.PlayerPrefsExtra.SetQuaternion(System.String,UnityEngine.Quaternion)">
            <summary>
            Set a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:SMLHelper.Utility.PrefabUtils">
            <summary>
            A small collection of prefab related utilities.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.PrefabUtils.AddBasicComponents(UnityEngine.GameObject@,System.String)">
            <summary>
            Adds and configures the following components on the gameobject passed by reference:<para/>
            - <see cref="T:UnityEngine.Rigidbody"/>
            - <see cref="T:LargeWorldEntity"/>
            - <see cref="T:UnityEngine.Renderer"/>
            - <see cref="T:SkyApplier"/>
            - <see cref="T:WorldForces"/>
            </summary>
            <param name="_object"></param>
            <param name="classId"></param>
        </member>
        <member name="M:SMLHelper.Utility.PrefabUtils.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Will attempt to return <see cref="M:UnityEngine.GameObject.GetComponent``1"/>.<para/>
            If the component is not found, it will be added through <see cref="M:UnityEngine.GameObject.AddComponent``1"/>.
            </summary>
            <typeparam name="T">A type of Unity <see cref="T:UnityEngine.Component"/>.</typeparam>
            <param name="obj">The gameobject that should have the component.</param>
            <returns>The existing component attached to the gameobject or a newly created and attached one.</returns>
        </member>
        <member name="T:SMLHelper.Utility.ReflectionHelper">
            <summary>
            An extension method class for simplifying reflection calls for improved readability.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.GetInstanceField``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the requested private field, using reflection, from the instance object.
            </summary>
            <typeparam name="T">The instance class type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the private field.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Instance" /> are already included.</param>
            <returns>
            The value of the requested field as an <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.SetInstanceField``1(``0,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the requested private field, using reflection, on the instance object.
            </summary>
            <typeparam name="T">The instance class type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the private field.</param>
            <param name="value">The value to set.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Instance" /> are already included.</param>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.GetStaticField``1(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the requested private static field, using reflection, from the static object.
            </summary>
            <typeparam name="T">The static class type.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
            <returns>
            The value of the requested static field as an <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.GetStaticField``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the requested private static field, using reflection, from the instance object.
            </summary>
            <typeparam name="T">The static class type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
            <returns>
            The value of the requested static field as an <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.SetStaticField``1(System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the requested private static field, using reflection, on the static object.
            </summary>
            <typeparam name="T">The static class type.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value to set.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.SetStaticField``1(``0,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the requested private static field, using reflection, on the instance object.
            </summary>
            <typeparam name="T">The static class type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value to set.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.GetInstanceMethod``1(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of a private instance method, using refelction, from the specified class.
            </summary>
            <typeparam name="T">The instance object type.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Instance" /> are already included.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> of the requested private method.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.GetInstanceMethod``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of a private instance method, using refelction, from the instance object.
            </summary>
            <typeparam name="T">The instance object type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Instance" /> are already included.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> of the requested private method.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.GetStaticMethod``1(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of a private static method, using refelction, from the specified class.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> of the requested private method.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.GetStaticMethod``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of a private static method, using refelction, from the instance object.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> of the requested private method.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.ReflectionHelper.CopyFields``1(``0,``0,System.Reflection.BindingFlags)">
            <summary>
            Does a deep copy of all field values from the original instance onto the copied instance.
            </summary>
            <typeparam name="T">The class type of both objects.</typeparam>
            <param name="original">The original instance.</param>
            <param name="copy">The instance receiving the copied values.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.Instance" /> is already included.</param>
        </member>
        <member name="T:SMLHelper.Utility.SaveUtils">
            <summary>
            A small collection of save data related utilities.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.SaveUtils.GetCurrentSaveDataDir">
            <summary>
            Returns the path to the current save slot's directory.
            </summary>
        </member>
        <member name="T:SMLHelper.Utility.SoundChannel">
            <summary>
            The a list the different volume controls in the game
            </summary>
        </member>
        <member name="F:SMLHelper.Utility.SoundChannel.Master">
            <summary>Master volume control</summary>
        </member>
        <member name="F:SMLHelper.Utility.SoundChannel.Music">
            <summary>Music volume control</summary>
        </member>
        <member name="F:SMLHelper.Utility.SoundChannel.Voice">
            <summary>Voice volume control</summary>
        </member>
        <member name="F:SMLHelper.Utility.SoundChannel.Ambient">
            <summary>Ambient volume control</summary>
        </member>
        <member name="T:SMLHelper.Utility.StorageHelperExtensions">
            <summary>
            Extension methods to provide static calls for <see cref="T:ItemsContainer"/> into <see cref="T:SMLHelper.Utility.ItemStorageHelper"/> methods.
            </summary>
        </member>
        <member name="M:SMLHelper.Utility.StorageHelperExtensions.HasRoomCached(ItemsContainer,System.Int32,System.Int32)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.StorageHelperExtensions.HasRoomCached(ItemsContainer,Vector2int)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="itemSize">Size of the item.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.StorageHelperExtensions.IsEmpty(ItemsContainer)">
            <summary>
            Determines whether the specified container is empty.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.StorageHelperExtensions.IsFull(ItemsContainer)">
            <summary>
            Determines whether the specified container is full.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is full; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.StorageHelperExtensions.GetTotalSlots(ItemsContainer)">
            <summary>
            The totals number of 1x1 slots in the container, as calculated by the container's width and height.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:SMLHelper.Utility.StorageHelperExtensions.GetStorageLabel(ItemsContainer)">
            <summary>
            Get the inernal label for the storage container.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The label used and displayed in-game for the container.
            </returns>
        </member>
        <member name="M:SMLHelper.Utility.StorageHelperExtensions.GetAllowedTechTypes(ItemsContainer)">
            <summary>
            Gets the set of techtypes allowed in this container. This set can be altered.
            If the set is null or empty, then all items can be added.
            </summary>
            <param name="container">The container to check.</param>
            <returns>
            The collection of techtypes allowed in the container.
            </returns>
        </member>
    </members>
</doc>
